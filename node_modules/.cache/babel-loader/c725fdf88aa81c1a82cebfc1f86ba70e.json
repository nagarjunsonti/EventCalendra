{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\component\\\\SideBarcomponent.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport PropTypes from 'prop-types';\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n    flexDirection: 'rowReverse'\n  }\n}));\nconst localizer = momentLocalizer(moment);\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }));\n});\n\nfunction SideBarcomponent(props) {\n  //const [modelOpen, closeModelClick]=props;\n  const classes = useStyles(); //const [modelOpen, setOpen] = React.useState(false);\n  //   const handleClickOpen = () => {\n  //     setOpen(true);\n  //   };\n  // const closeModelClick = () => {\n  //   setOpen(false);\n  // };\n\n  const eventsArray = [{\n    start: new Date(),\n    end: new Date(moment().add(1, \"hours\")),\n    eventClasses: 'optionalEvent',\n    title: 'test event',\n    description: 'This is a test description of an event'\n  }, {\n    start: new Date(moment().add(2, \"days\")),\n    end: new Date(moment().add(2, \"hours\")),\n    title: 'test event',\n    description: 'This is a test description of an event',\n    data: 'you can add what ever random data you may want to use later'\n  }];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    fullScreen: true,\n    open: props.modelOpen,\n    onClose: props.closeModelClick,\n    TransitionComponent: Transition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    edge: \"start\",\n    color: \"inherit\",\n    onClick: props.closeModelClick,\n    \"aria-label\": \"close\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(CloseIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })))), React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Calander\"), React.createElement(Calendar, {\n    localizer: localizer,\n    defaultDate: new Date(),\n    defaultView: \"month\",\n    events: eventsArray,\n    style: {\n      height: \"100vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))));\n}\n\nexport default SideBarcomponent;","map":{"version":3,"sources":["C:/projects/spectrum/src/component/SideBarcomponent.js"],"names":["React","makeStyles","Dialog","AppBar","Toolbar","IconButton","CloseIcon","Slide","Calendar","momentLocalizer","PropTypes","moment","useStyles","theme","appBar","position","title","marginLeft","spacing","flex","flexDirection","localizer","Transition","forwardRef","props","ref","SideBarcomponent","classes","eventsArray","start","Date","end","add","eventClasses","description","data","modelOpen","closeModelClick","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport {Calendar,momentLocalizer} from 'react-big-calendar';\r\nimport PropTypes from 'prop-types';\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n    flexDirection: 'rowReverse'\r\n  },\r\n}));\r\n\r\nconst localizer = momentLocalizer(moment)\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction SideBarcomponent(props) {\r\n  //const [modelOpen, closeModelClick]=props;\r\n  const classes = useStyles();\r\n  //const [modelOpen, setOpen] = React.useState(false);\r\n\r\n//   const handleClickOpen = () => {\r\n//     setOpen(true);\r\n//   };\r\n\r\n  // const closeModelClick = () => {\r\n  //   setOpen(false);\r\n  // };\r\n  const eventsArray = [\r\n    {\r\n        start: new Date(),\r\n        end: new Date(moment().add(1, \"hours\")),\r\n        eventClasses: 'optionalEvent',\r\n        title: 'test event',\r\n        description: 'This is a test description of an event',\r\n    },\r\n    {\r\n        start: new Date(moment().add(2, \"days\")),\r\n        end: new Date(moment().add(2, \"hours\")),\r\n        title: 'test event',\r\n        description: 'This is a test description of an event',\r\n        data: 'you can add what ever random data you may want to use later',\r\n    },\r\n];\r\n\r\n  return (\r\n    <div>\r\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open full-screen dialog\r\n      </Button> */}\r\n      <Dialog fullScreen open={props.modelOpen} onClose={props.closeModelClick} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>            \r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={props.closeModelClick} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <React.Fragment>\r\n          <h2>Calander</h2>\r\n          {/* <EventCalendar\r\n             \r\n            month={7}\r\n            year={2015}\r\n            events={eventsArray} \r\n            onEventClick={(target, eventData, day) => console.log(eventData)}\r\n          /> */}\r\n          <Calendar\r\n            localizer={localizer}\r\n            defaultDate={new Date()}\r\n            defaultView=\"month\"\r\n            events={eventsArray}\r\n            style={{ height: \"100vh\" }}\r\n          />\r\n        </React.Fragment>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBarcomponent;"]},"metadata":{},"sourceType":"module"}