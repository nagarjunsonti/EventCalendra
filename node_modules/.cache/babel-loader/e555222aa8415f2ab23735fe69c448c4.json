{"ast":null,"code":"\"use strict\";\n\nvar ensureString = require(\"type/string/ensure\"),\n    aFrom = require(\"es5-ext/array/from\"),\n    assign = require(\"es5-ext/object/assign\"),\n    setPrototypeOf = require(\"es5-ext/object/set-prototype-of\"),\n    d = require(\"d\"),\n    lazy = require(\"d/lazy\"),\n    levelNames = require(\"../../../levels\"),\n    emitter = require(\"../../emitter\"),\n    enableDisableProps = require(\"./enable-disable-props\"),\n    namespaceProps = require(\"./namespace-props\"); // Map of initialized top level loggers\n\n\nvar levelLoggers = Object.create(null);\nvar loggerPrototype = Object.create(Function.prototype, assign({\n  isLevelInitialized: d(\"e\", function (level) {\n    level = ensureString(level);\n    if (this.level === level) return true;\n    var logger = levelLoggers[level];\n    if (!logger) return false;\n    if (!this.namespace) return true;\n    return logger.isNamespaceInitialized(this.namespace);\n  }),\n  getAllInitializedLevels: d(\"e\", function () {\n    return Object.keys(levelLoggers).filter(function (level) {\n      return this.isLevelInitialized(level);\n    }, this).map(function (level) {\n      return this._getLevelLogger(level);\n    }, this);\n  }),\n  _createLogger: d(function () {\n    return setPrototypeOf(function self(msgItemIgnored\n    /*, ...msgItemn*/\n    ) {\n      emitter.emit(\"log\", {\n        logger: self,\n        messageTokens: aFrom(arguments)\n      });\n    }, this);\n  }),\n  _createLevel: d(function (levelName) {\n    if (levelLoggers[levelName]) return levelLoggers[levelName];\n\n    var logger = loggerPrototype._createLogger();\n\n    Object.defineProperties(logger, {\n      level: d(\"e\", levelName),\n      levelIndex: d(\"e\", levelNames.indexOf(levelName)),\n      levelRoot: d(\"e\", logger)\n    });\n    levelLoggers[levelName] = logger;\n    emitter.emit(\"init\", {\n      logger: logger\n    });\n    return logger;\n  }),\n  _getLevelLogger: d(function (newLevel) {\n    if (this.level === newLevel) return this;\n\n    var levelLogger = this._createLevel(newLevel);\n\n    return this.namespaceTokens.reduce(function (currentLogger, token) {\n      return currentLogger._createNamespace(token);\n    }, levelLogger);\n  })\n}, lazy(assign( // Loggers for all levels\nlevelNames.reduce(function (descriptors, level) {\n  descriptors[level] = d(\"e\", function () {\n    return this._getLevelLogger(level);\n  }, {\n    cacheName: \"_\" + level\n  });\n  return descriptors;\n}, {}), {\n  // Alias `warn` to `warning`\n  warn: d(function () {\n    return this._getLevelLogger(\"warning\");\n  }, {\n    cacheName: \"_warning\"\n  })\n})), namespaceProps, enableDisableProps));\nmodule.exports = loggerPrototype;","map":null,"metadata":{},"sourceType":"script"}