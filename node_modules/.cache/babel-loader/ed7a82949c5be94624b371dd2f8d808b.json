{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\component\\\\AddEventsTable.js\";\nimport React, { useState } from 'react';\nimport TableWidget from '../widgets/TableWidget';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { eventColumns } from '../data/EventData';\n\nfunction AddEventsTable(props) {\n  const eventsList = props.eventsList;\n\n  const getFilterdata = eventsList => {\n    let data = eventsList.filter(element => {\n      return element.registerd_user.length < element.capacity;\n    });\n    return data;\n  };\n\n  const filterdata = getFilterdata(eventsList);\n  const ToolbarConfig = {\n    title: \"Add Events\",\n    icon: \"add\"\n  };\n\n  const addSelectedRows = data => {};\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(TableWidget, {\n    rows: filterdata,\n    defaultSort: \"name\",\n    columns: eventColumns,\n    tableTitle: \"Add Evvents\",\n    handleToolBarAction: addSelectedRows,\n    toolbarConfig: toolbarConfig,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    eventsList: state.eventsList\n  };\n};\n\nconst mapDispachToProps = dispatch => {\n  return {\n    addSelectedRows: seletedRowIds => {\n      dispatch({\n        type: \"add_event_data\",\n        data: seletedRowIds\n      });\n    }\n  };\n};\n\nAddEventsTable.propTypes = {\n  title: PropTypes.string.isRequired,\n  columns: PropTypes.array.isRequired,\n  eventsList: PropTypes.array.isRequired,\n  addSelectedRows: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispachToProps)(AddEventsTable);","map":{"version":3,"sources":["C:/projects/spectrum/src/component/AddEventsTable.js"],"names":["React","useState","TableWidget","connect","PropTypes","eventColumns","AddEventsTable","props","eventsList","getFilterdata","data","filter","element","registerd_user","length","capacity","filterdata","ToolbarConfig","title","icon","addSelectedRows","toolbarConfig","mapStateToProps","state","mapDispachToProps","dispatch","seletedRowIds","type","propTypes","string","isRequired","columns","array","func"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAAA,QACnBC,UADmB,GACPD,KADO,CACnBC,UADmB;;AAE1B,QAAMC,aAAa,GAAED,UAAD,IAAc;AAC/B,QAAIE,IAAI,GAAEF,UAAU,CAACG,MAAX,CAAmBC,OAAD,IAAW;AAClC,aAAQA,OAAO,CAACC,cAAR,CAAuBC,MAAvB,GAAgCF,OAAO,CAACG,QAAhD;AACH,KAFQ,CAAV;AAGC,WAAOL,IAAP;AACH,GALD;;AAMA,QAAMM,UAAU,GAACP,aAAa,CAACD,UAAD,CAA9B;AAEA,QAAMS,aAAa,GAAC;AAClBC,IAAAA,KAAK,EAAC,YADY;AAElBC,IAAAA,IAAI,EAAC;AAFa,GAApB;;AAIA,QAAMC,eAAe,GAAEV,IAAD,IAAQ,CAE7B,CAFD;;AAGA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACE,IAAA,IAAI,EAAEM,UADR;AAEE,IAAA,WAAW,EAAC,MAFd;AAGE,IAAA,OAAO,EAAEX,YAHX;AAIE,IAAA,UAAU,EAAE,aAJd;AAKE,IAAA,mBAAmB,EAAEe,eALvB;AAME,IAAA,aAAa,EAAEC,aANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAYH;;AAED,MAAMC,eAAe,GAAEC,KAAD,IAAS;AAC7B,SAAO;AACLf,IAAAA,UAAU,EAACe,KAAK,CAACf;AADZ,GAAP;AAGD,CAJD;;AAKA,MAAMgB,iBAAiB,GAAEC,QAAD,IAAY;AAClC,SAAO;AACLL,IAAAA,eAAe,EAAEM,aAAD,IAAiB;AAC/BD,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,gBAAN;AAAwBjB,QAAAA,IAAI,EAACgB;AAA7B,OAAD,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAOApB,cAAc,CAACsB,SAAf,GAAyB;AACvBV,EAAAA,KAAK,EAACd,SAAS,CAACyB,MAAV,CAAiBC,UADA;AAEvBC,EAAAA,OAAO,EAAC3B,SAAS,CAAC4B,KAAV,CAAgBF,UAFD;AAGvBtB,EAAAA,UAAU,EAACJ,SAAS,CAAC4B,KAAV,CAAgBF,UAHJ;AAIvBV,EAAAA,eAAe,EAAChB,SAAS,CAAC6B,IAAV,CAAeH;AAJR,CAAzB;AAMA,eAAe3B,OAAO,CAACmB,eAAD,EAAkBE,iBAAlB,CAAP,CAA4ClB,cAA5C,CAAf","sourcesContent":["import React,{useState} from 'react';\r\nimport TableWidget from '../widgets/TableWidget';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { eventColumns } from '../data/EventData';\r\nfunction AddEventsTable(props){\r\n    const {eventsList}=props;\r\n    const getFilterdata=(eventsList)=>{\r\n       let data= eventsList.filter((element)=>{\r\n            return (element.registerd_user.length < element.capacity);\r\n        });\r\n        return data;\r\n    }    \r\n    const filterdata=getFilterdata(eventsList);\r\n    \r\n    const ToolbarConfig={\r\n      title:\"Add Events\",\r\n      icon:\"add\"\r\n    }\r\n    const addSelectedRows=(data)=>{\r\n\r\n    }\r\n    return (\r\n        <React.Fragment>            \r\n            <TableWidget \r\n              rows={filterdata} \r\n              defaultSort='name'\r\n              columns={eventColumns}\r\n              tableTitle={\"Add Evvents\"}             \r\n              handleToolBarAction={addSelectedRows}\r\n              toolbarConfig={toolbarConfig}                                    \r\n            />            \r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n  return {\r\n    eventsList:state.eventsList\r\n  }\r\n}\r\nconst mapDispachToProps=(dispatch)=>{\r\n  return {\r\n    addSelectedRows:(seletedRowIds)=>{\r\n      dispatch({type:\"add_event_data\", data:seletedRowIds})\r\n    }\r\n  }\r\n}\r\nAddEventsTable.propTypes={\r\n  title:PropTypes.string.isRequired,\r\n  columns:PropTypes.array.isRequired,\r\n  eventsList:PropTypes.array.isRequired,\r\n  addSelectedRows:PropTypes.func.isRequired  \r\n}\r\nexport default connect(mapStateToProps, mapDispachToProps)(AddEventsTable);"]},"metadata":{},"sourceType":"module"}