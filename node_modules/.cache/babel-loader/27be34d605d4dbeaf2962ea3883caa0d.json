{"ast":null,"code":"\"use strict\";\n\nvar ensureString = require(\"type/string/ensure\"),\n    toShortString = require(\"type/lib/to-short-string\"),\n    identity = require(\"es5-ext/function/identity\"),\n    assign = require(\"es5-ext/object/assign\"),\n    objToArray = require(\"es5-ext/object/to-array\"),\n    d = require(\"d\"),\n    lazy = require(\"d/lazy\"),\n    emitter = require(\"../../emitter\"),\n    isNamespaceToken = require(\"../is-namespace-token\");\n\nmodule.exports = assign({\n  // Initializes and returns namespaced logger\n  get: d(function (namespace) {\n    namespace = ensureString(namespace);\n    var namespaceTokens = namespace.split(\":\");\n    namespaceTokens.forEach(function (namespaceToken) {\n      if (!isNamespaceToken(namespaceToken)) {\n        throw new TypeError(toShortString(namespace) + \" is not a valid namespace string \" + \"(only 'a-z0-9-' chars are allowed and ':' as delimiter)\");\n      }\n    });\n    return namespaceTokens.reduce(function (currentLogger, token) {\n      return currentLogger._createNamespace(token);\n    }, this);\n  }),\n  isNamespaceInitialized: d(\"e\", function (namespace) {\n    var namespaceTokens = ensureString(namespace).split(\":\");\n    var currentLogger = this;\n    return namespaceTokens.every(function (nsToken) {\n      return currentLogger = currentLogger._childNamespaceLoggers[nsToken];\n    });\n  }),\n  getAllInitializedNamespaces: d(\"e\", function () {\n    return objToArray(this._childNamespaceLoggers, identity);\n  }),\n  _createNamespace: d(function (namespaceToken) {\n    if (this._childNamespaceLoggers[namespaceToken]) {\n      return this._childNamespaceLoggers[namespaceToken];\n    }\n\n    var logger = Object.defineProperties(this._createLogger(), {\n      _namespaceToken: d(\"\", namespaceToken)\n    });\n    this._childNamespaceLoggers[namespaceToken] = logger;\n    emitter.emit(\"init\", {\n      logger: logger\n    });\n    return logger;\n  }),\n  _namespaceToken: d(\"\", null)\n}, lazy({\n  // Full namespace string e.g. foo:bar:elo\n  namespace: d(\"e\", function () {\n    return this.namespaceTokens.join(\":\") || null;\n  }, {\n    cacheName: \"_namespace\"\n  }),\n  // All namespace tokens e.g. [\"foo\", \"bar\", \"elo\"]\n  namespaceTokens: d(\"e\", function () {\n    return this._namespaceToken ? Object.getPrototypeOf(this).namespaceTokens.concat(this._namespaceToken) : [];\n  }, {\n    cacheName: \"_namespaceTokens\"\n  }),\n  // Internal: Map of children namespace loggers\n  _childNamespaceLoggers: d(\"\", function () {\n    return Object.create(null);\n  }, {\n    cacheName: \"__childNamespaceLoggers\"\n  })\n}));","map":null,"metadata":{},"sourceType":"script"}