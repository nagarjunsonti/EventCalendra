{"ast":null,"code":"import _slicedToArray from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\component\\\\AddEventsTable.js\";\nimport React, { useState } from 'react';\nimport TableWidget from '../widgets/TableWidget';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { eventColumns } from '../data/EventData';\n\nfunction AddEventsTable(props) {\n  const eventsList = props.eventsList,\n        addUserData = props.addUserData;\n\n  const _useState = useState(eventsList),\n        _useState2 = _slicedToArray(_useState, 2),\n        tableData = _useState2[0],\n        setTableData = _useState2[1];\n\n  const getFilterdata = eventsList => {\n    let data = eventsList.filter(element => {\n      return element.registerd_user.length < element.capacity;\n    });\n    return data;\n  };\n\n  const filterdata = getFilterdata(eventsList);\n  const toolbarConfig = {\n    title: \"Add Events\",\n    icon: \"add\"\n  };\n\n  const addSelectedRows = data => {\n    let selecteddataList = data;\n    props.updateEventsSelectedRows({\n      userData: addUserData,\n      eventsId: selecteddataList\n    });\n  };\n\n  const handleTableSearch = value => {\n    let searcheddata = value;\n    let regex = new RegExp(searcheddata, 'gi');\n    let filterData = eventsList.filter(value => {\n      return value.organizer.match(regex);\n    });\n    setTableData(filterData);\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(TableWidget, {\n    rows: tableData,\n    defaultSort: \"name\",\n    columns: eventColumns,\n    tableTitle: \"Add Evvents\",\n    handleToolBarAction: addSelectedRows,\n    toolbarConfig: toolbarConfig,\n    handleTableSearch: handleTableSearch,\n    searchPlaceholder: \"Search By Organizer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    eventsList: state.eventsList\n  };\n};\n\nconst mapDispachToProps = dispatch => {\n  return {\n    updateEventsSelectedRows: data => {\n      dispatch({\n        type: \"add_event_data\",\n        data: data\n      });\n    }\n  };\n};\n\nAddEventsTable.propTypes = {\n  eventsList: PropTypes.array.isRequired\n};\nexport default connect(mapStateToProps, mapDispachToProps)(AddEventsTable);","map":{"version":3,"sources":["C:/projects/spectrum/src/component/AddEventsTable.js"],"names":["React","useState","TableWidget","connect","PropTypes","eventColumns","AddEventsTable","props","eventsList","addUserData","tableData","setTableData","getFilterdata","data","filter","element","registerd_user","length","capacity","filterdata","toolbarConfig","title","icon","addSelectedRows","selecteddataList","updateEventsSelectedRows","userData","eventsId","handleTableSearch","value","searcheddata","regex","RegExp","filterData","organizer","match","mapStateToProps","state","mapDispachToProps","dispatch","type","propTypes","array","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA,QACrBC,UADqB,GACOD,KADP,CACrBC,UADqB;AAAA,QACTC,WADS,GACOF,KADP,CACTE,WADS;;AAAA,oBAEKR,QAAQ,CAACO,UAAD,CAFb;AAAA;AAAA,QAEtBE,SAFsB;AAAA,QAEXC,YAFW;;AAG7B,QAAMC,aAAa,GAAIJ,UAAD,IAAgB;AACpC,QAAIK,IAAI,GAAGL,UAAU,CAACM,MAAX,CAAmBC,OAAD,IAAa;AACxC,aAAQA,OAAO,CAACC,cAAR,CAAuBC,MAAvB,GAAgCF,OAAO,CAACG,QAAhD;AACD,KAFU,CAAX;AAGA,WAAOL,IAAP;AACD,GALD;;AAMA,QAAMM,UAAU,GAAGP,aAAa,CAACJ,UAAD,CAAhC;AAEA,QAAMY,aAAa,GAAG;AACpBC,IAAAA,KAAK,EAAE,YADa;AAEpBC,IAAAA,IAAI,EAAE;AAFc,GAAtB;;AAIA,QAAMC,eAAe,GAAIV,IAAD,IAAU;AAChC,QAAIW,gBAAgB,GAAGX,IAAvB;AACAN,IAAAA,KAAK,CAACkB,wBAAN,CAA+B;AAAEC,MAAAA,QAAQ,EAAEjB,WAAZ;AAAyBkB,MAAAA,QAAQ,EAAEH;AAAnC,KAA/B;AACD,GAHD;;AAIA,QAAMI,iBAAiB,GAAIC,KAAD,IAAW;AACnC,QAAIC,YAAY,GAAGD,KAAnB;AACA,QAAIE,KAAK,GAAG,IAAIC,MAAJ,CAAWF,YAAX,EAAyB,IAAzB,CAAZ;AACA,QAAIG,UAAU,GAAGzB,UAAU,CAACM,MAAX,CAAmBe,KAAD,IAAW;AAC5C,aAAOA,KAAK,CAACK,SAAN,CAAgBC,KAAhB,CAAsBJ,KAAtB,CAAP;AACD,KAFgB,CAAjB;AAGApB,IAAAA,YAAY,CAACsB,UAAD,CAAZ;AACD,GAPD;;AAQA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAEvB,SADR;AAEE,IAAA,WAAW,EAAC,MAFd;AAGE,IAAA,OAAO,EAAEL,YAHX;AAIE,IAAA,UAAU,EAAE,aAJd;AAKE,IAAA,mBAAmB,EAAEkB,eALvB;AAME,IAAA,aAAa,EAAEH,aANjB;AAOE,IAAA,iBAAiB,EAAEQ,iBAPrB;AAQE,IAAA,iBAAiB,EAAC,qBARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAcD;;AAED,MAAMQ,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACL7B,IAAAA,UAAU,EAAE6B,KAAK,CAAC7B;AADb,GAAP;AAGD,CAJD;;AAKA,MAAM8B,iBAAiB,GAAIC,QAAD,IAAc;AACtC,SAAO;AACLd,IAAAA,wBAAwB,EAAGZ,IAAD,IAAU;AAClC0B,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,gBAAR;AAA0B3B,QAAAA,IAAI,EAAEA;AAAhC,OAAD,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAOAP,cAAc,CAACmC,SAAf,GAA2B;AACzBjC,EAAAA,UAAU,EAAEJ,SAAS,CAACsC,KAAV,CAAgBC;AADH,CAA3B;AAGA,eAAexC,OAAO,CAACiC,eAAD,EAAkBE,iBAAlB,CAAP,CAA4ChC,cAA5C,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport TableWidget from '../widgets/TableWidget';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { eventColumns } from '../data/EventData';\r\nfunction AddEventsTable(props) {\r\n  const { eventsList, addUserData } = props;\r\n  const [tableData, setTableData] = useState(eventsList);\r\n  const getFilterdata = (eventsList) => {\r\n    let data = eventsList.filter((element) => {\r\n      return (element.registerd_user.length < element.capacity);\r\n    });\r\n    return data;\r\n  }\r\n  const filterdata = getFilterdata(eventsList);\r\n\r\n  const toolbarConfig = {\r\n    title: \"Add Events\",\r\n    icon: \"add\"\r\n  }\r\n  const addSelectedRows = (data) => {\r\n    let selecteddataList = data;\r\n    props.updateEventsSelectedRows({ userData: addUserData, eventsId: selecteddataList });\r\n  }\r\n  const handleTableSearch = (value) => {\r\n    let searcheddata = value;\r\n    let regex = new RegExp(searcheddata, 'gi');\r\n    let filterData = eventsList.filter((value) => {\r\n      return value.organizer.match(regex);\r\n    });\r\n    setTableData(filterData)\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <TableWidget\r\n        rows={tableData}\r\n        defaultSort='name'\r\n        columns={eventColumns}\r\n        tableTitle={\"Add Evvents\"}\r\n        handleToolBarAction={addSelectedRows}\r\n        toolbarConfig={toolbarConfig}\r\n        handleTableSearch={handleTableSearch}\r\n        searchPlaceholder=\"Search By Organizer\"\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    eventsList: state.eventsList\r\n  }\r\n}\r\nconst mapDispachToProps = (dispatch) => {\r\n  return {\r\n    updateEventsSelectedRows: (data) => {\r\n      dispatch({ type: \"add_event_data\", data: data })\r\n    }\r\n  }\r\n}\r\nAddEventsTable.propTypes = {\r\n  eventsList: PropTypes.array.isRequired\r\n}\r\nexport default connect(mapStateToProps, mapDispachToProps)(AddEventsTable);"]},"metadata":{},"sourceType":"module"}