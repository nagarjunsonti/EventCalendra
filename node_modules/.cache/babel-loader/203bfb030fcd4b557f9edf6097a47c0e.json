{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\component\\\\AddEventsTable.js\";\nimport React from 'react';\nimport TableWidget from '../widgets/TableWidget';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { eventColumns } from '../data/EventData';\n\nfunction AddEventsTable(props) {\n  const eventsList = props.eventsList,\n        addUserData = props.addUserData;\n\n  const getFilterdata = eventsList => {\n    let data = eventsList.filter(element => {\n      return element.registerd_user.length < element.capacity;\n    });\n    return data;\n  };\n\n  const filterdata = getFilterdata(eventsList);\n  const toolbarConfig = {\n    title: \"Add Events\",\n    icon: \"add\"\n  };\n\n  const addSelectedRows = data => {\n    let selecteddataList = data;\n    props.updateEventsSelectedRows({\n      userData: addUserData,\n      eventsId: selecteddataList\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(TableWidget, {\n    rows: filterdata,\n    defaultSort: \"name\",\n    columns: eventColumns,\n    tableTitle: \"Add Evvents\",\n    handleToolBarAction: addSelectedRows,\n    toolbarConfig: toolbarConfig,\n    handleTableSearch: props.handleTableSearch,\n    searchPlaceholder: \"Search By Organizer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    eventsList: state.eventsList\n  };\n};\n\nconst mapDispachToProps = dispatch => {\n  return {\n    updateEventsSelectedRows: data => {\n      dispatch({\n        type: \"add_event_data\",\n        data: data\n      });\n    },\n    handleTableSearch: searcheddata => {\n      dispatch({\n        type: \"search_events_tables_data\",\n        data: searcheddata\n      });\n    }\n  };\n};\n\nAddEventsTable.propTypes = {\n  eventsList: PropTypes.array.isRequired\n};\nexport default connect(mapStateToProps, mapDispachToProps)(AddEventsTable);","map":{"version":3,"sources":["C:/projects/spectrum/src/component/AddEventsTable.js"],"names":["React","TableWidget","connect","PropTypes","eventColumns","AddEventsTable","props","eventsList","addUserData","getFilterdata","data","filter","element","registerd_user","length","capacity","filterdata","toolbarConfig","title","icon","addSelectedRows","selecteddataList","updateEventsSelectedRows","userData","eventsId","handleTableSearch","mapStateToProps","state","mapDispachToProps","dispatch","type","searcheddata","propTypes","array","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAAA,QACnBC,UADmB,GACMD,KADN,CACnBC,UADmB;AAAA,QACPC,WADO,GACMF,KADN,CACPE,WADO;;AAE1B,QAAMC,aAAa,GAAEF,UAAD,IAAc;AAC/B,QAAIG,IAAI,GAAEH,UAAU,CAACI,MAAX,CAAmBC,OAAD,IAAW;AAClC,aAAQA,OAAO,CAACC,cAAR,CAAuBC,MAAvB,GAAgCF,OAAO,CAACG,QAAhD;AACH,KAFQ,CAAV;AAGC,WAAOL,IAAP;AACH,GALD;;AAMA,QAAMM,UAAU,GAACP,aAAa,CAACF,UAAD,CAA9B;AAEA,QAAMU,aAAa,GAAC;AAClBC,IAAAA,KAAK,EAAC,YADY;AAElBC,IAAAA,IAAI,EAAC;AAFa,GAApB;;AAIA,QAAMC,eAAe,GAAEV,IAAD,IAAQ;AAC5B,QAAIW,gBAAgB,GAACX,IAArB;AACAJ,IAAAA,KAAK,CAACgB,wBAAN,CAA+B;AAACC,MAAAA,QAAQ,EAACf,WAAV;AAAuBgB,MAAAA,QAAQ,EAACH;AAAhC,KAA/B;AACD,GAHD;;AAIA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACE,IAAA,IAAI,EAAEL,UADR;AAEE,IAAA,WAAW,EAAC,MAFd;AAGE,IAAA,OAAO,EAAEZ,YAHX;AAIE,IAAA,UAAU,EAAE,aAJd;AAKE,IAAA,mBAAmB,EAAEgB,eALvB;AAME,IAAA,aAAa,EAAEH,aANjB;AAOE,IAAA,iBAAiB,EAAEX,KAAK,CAACmB,iBAP3B;AAQE,IAAA,iBAAiB,EAAC,qBARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAcH;;AAED,MAAMC,eAAe,GAAEC,KAAD,IAAS;AAC7B,SAAO;AACLpB,IAAAA,UAAU,EAACoB,KAAK,CAACpB;AADZ,GAAP;AAGD,CAJD;;AAKA,MAAMqB,iBAAiB,GAAEC,QAAD,IAAY;AAClC,SAAO;AACLP,IAAAA,wBAAwB,EAAEZ,IAAD,IAAQ;AAC/BmB,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAC,gBAAN;AAAwBpB,QAAAA,IAAI,EAACA;AAA7B,OAAD,CAAR;AACD,KAHI;AAILe,IAAAA,iBAAiB,EAAEM,YAAD,IAAgB;AAC9BF,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAC,2BAAN;AAAmCpB,QAAAA,IAAI,EAACqB;AAAxC,OAAD,CAAR;AACH;AANI,GAAP;AAQD,CATD;;AAUA1B,cAAc,CAAC2B,SAAf,GAAyB;AACvBzB,EAAAA,UAAU,EAACJ,SAAS,CAAC8B,KAAV,CAAgBC;AADJ,CAAzB;AAGA,eAAehC,OAAO,CAACwB,eAAD,EAAkBE,iBAAlB,CAAP,CAA4CvB,cAA5C,CAAf","sourcesContent":["import React from 'react';\r\nimport TableWidget from '../widgets/TableWidget';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { eventColumns } from '../data/EventData';\r\nfunction AddEventsTable(props){\r\n    const {eventsList, addUserData}=props;\r\n    const getFilterdata=(eventsList)=>{\r\n       let data= eventsList.filter((element)=>{\r\n            return (element.registerd_user.length < element.capacity);\r\n        });\r\n        return data;\r\n    }    \r\n    const filterdata=getFilterdata(eventsList);\r\n\r\n    const toolbarConfig={\r\n      title:\"Add Events\",\r\n      icon:\"add\"\r\n    }\r\n    const addSelectedRows=(data)=>{\r\n      let selecteddataList=data;     \r\n      props.updateEventsSelectedRows({userData:addUserData, eventsId:selecteddataList});\r\n    }\r\n    return (\r\n        <React.Fragment>            \r\n            <TableWidget \r\n              rows={filterdata} \r\n              defaultSort='name'\r\n              columns={eventColumns}\r\n              tableTitle={\"Add Evvents\"}             \r\n              handleToolBarAction={addSelectedRows}\r\n              toolbarConfig={toolbarConfig}\r\n              handleTableSearch={props.handleTableSearch}\r\n              searchPlaceholder=\"Search By Organizer\"                                  \r\n            />            \r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n  return {\r\n    eventsList:state.eventsList\r\n  }\r\n}\r\nconst mapDispachToProps=(dispatch)=>{\r\n  return {\r\n    updateEventsSelectedRows:(data)=>{\r\n      dispatch({type:\"add_event_data\", data:data})\r\n    },\r\n    handleTableSearch:(searcheddata)=>{\r\n        dispatch({type:\"search_events_tables_data\", data:searcheddata})\r\n    }\r\n  }\r\n}\r\nAddEventsTable.propTypes={   \r\n  eventsList:PropTypes.array.isRequired  \r\n}\r\nexport default connect(mapStateToProps, mapDispachToProps)(AddEventsTable);"]},"metadata":{},"sourceType":"module"}