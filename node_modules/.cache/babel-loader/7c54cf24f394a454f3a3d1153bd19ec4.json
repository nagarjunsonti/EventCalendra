{"ast":null,"code":"/*!\n * Cluster - receiver mixin\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\nmodule.exports = function (obj) {\n  /**\n   * Initialize buffer.\n   */\n  obj._buf = '';\n  /**\n   * Frame incoming command, buffering the given `chunk`\n   * until a frame is complete. Frames are delimited by a\n   * line feed.\n   *\n   * @param {String} chunk\n   * @api private\n   */\n\n  obj.frame = function (chunk) {\n    for (var i = 0, len = chunk.length; i < len; ++i) {\n      if ('\\n' == chunk[i]) {\n        var worker,\n            obj = JSON.parse(this._buf);\n        this._buf = '';\n        if ('number' == typeof obj.id) worker = this.children[obj.id];\n        this.invoke(obj.method, obj.args, worker);\n      } else {\n        this._buf += chunk[i];\n      }\n    }\n  };\n  /**\n   * Invoke `method` with the given `args`.\n   *\n   * @param {String} method\n   * @param {Mixed} args\n   * @param {Worker} worker\n   * @api private\n   */\n\n\n  obj.invoke = function (method, args, worker) {\n    if (!method) return;\n    if (!Array.isArray(args)) args = [args];\n    if (worker) args.unshift(worker);\n    if (!this[method]) throw new Error('method ' + method + '() does not exist');\n    this[method].apply(this, args);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}