{"ast":null,"code":"/*!\n * Cluster - reload\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = require('fs'),\n    basename = require('path').basename,\n    extname = require('path').extname;\n/**\n * Restart the server the given js `files` have changed.\n * `files` may be several directories, filenames, etc,\n * defaulting to the server's root directory.\n *\n * Options:\n *\n *   - `signal` Signal defaulting to __SIGTERM__\n *   - `interval` Watcher interval, defaulting to `100`\n *   - `extensions` File extensions to watch, defaults to ['.js']\n *\n * Examples:\n *\n *     cluster(server)\n *       .use(cluster.reload())\n *       .listen(3000);\n *\n *     cluster(server)\n *       .use(cluster.reload('lib'))\n *       .listen(3000);\n *     \n *     cluster(server)\n *       .use(cluster.reload(['lib', 'tests', 'index.js']))\n *       .listen(3000);\n *\n *     cluster(server)\n *       .use(cluster.reload('lib', { interval: 60000 }))\n *       .listen(3000);\n *\n *     cluster(server)\n *       .use(cluster.reload('lib', { extensions: ['.js', '.coffee'] }))\n *       .listen(3000);\n *\n * Ignore Directories:\n *\n *  By default `reload()` will ignore the following directories:\n *\n *   - node_modules\n *   - support\n *   - examples\n *   - test\n *   - bin\n *\n *  Alter with `reload.ignoreDirectories`\n *\n *      cluster.reload.ignoreDirectories.push('src');\n *\n * @param {String|Array} files\n * @param {Options} options\n * @return {Function}\n * @api public\n */\n\n\nexports = module.exports = function (files, options) {\n  options = options || {}; // defaults\n\n  var interval = options.interval || 100,\n      extensions = options.extensions || ['.js'],\n      signal = options.signal || 'SIGTERM';\n  return function (master) {\n    if (!files) files = master.dir;\n    if (!Array.isArray(files)) files = [files];\n    files.forEach(traverse); // traverse file if it is a directory\n    // otherwise setup the watcher\n\n    function traverse(file) {\n      file = master.resolve(file);\n      fs.stat(file, function (err, stat) {\n        if (!err) {\n          if (stat.isDirectory()) {\n            if (~exports.ignoreDirectories.indexOf(basename(file))) return;\n            fs.readdir(file, function (err, files) {\n              files.map(function (f) {\n                return file + '/' + f;\n              }).forEach(traverse);\n            });\n          } else {\n            watch(file);\n          }\n        }\n      });\n    } // watch file for changes\n\n\n    function watch(file) {\n      if (!~extensions.indexOf(extname(file))) return;\n      fs.watchFile(file, {\n        interval: interval\n      }, function (curr, prev) {\n        if (curr.mtime > prev.mtime) {\n          console.log('  \\033[36mchanged\\033[0m \\033[90m- %s\\033[0m', file);\n          master.restartWorkers(signal);\n        }\n      });\n    }\n  };\n};\n/**\n * Directories to ignore.\n */\n\n\nexports.ignoreDirectories = ['node_modules', 'support', 'test', 'bin'];","map":null,"metadata":{},"sourceType":"script"}