{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\container\\\\tablecontainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Usertable from '../component/userTable';\nimport Eventtable from '../component/eventTable';\nimport { userColumns } from '../data/Userdata';\nimport { eventColumns } from '../data/EventData';\nimport { Container, Box } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nfunction Tablecontainer() {\n  const handleTableSearch = value => {\n    let searcheddata = value;\n    let user_ids_event = [];\n    let flag = false;\n    let regex = new RegExp(searcheddata, 'gi');\n    let EventData = props.eventsList;\n    let filterData = EventData.filter(value => {\n      flag = value.organizer.match(regex);\n\n      if (flag) {\n        //events_ids.push(value.index);\n        user_ids_event = [...new Set([...user_ids_event, ...value.registerd_user])];\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setModelData(_objectSpread({}, modelData, {\n      calanderDataList: filterData,\n      searchFilterValue: value\n    })); //    userFilterData = state.usersList.filter((element) => {\n    //         return user_ids_event.includes(element.index);                                    \n    //     });\n    // newState = {\n    //     ...state,\n    //     eventsList: filterData,\n    //     usersList: userFilterData\n    // };\n  };\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Box, {\n    my: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Usertable, {\n    columns: userColumns,\n    title: 'User List',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(Eventtable, {\n    columns: eventColumns,\n    title: 'Event List',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })));\n}\n\nconst mapStateToProps = state => {\n  return {\n    eventsList: state.eventsList,\n    usersList: state.usersList\n  };\n};\n\nconst mapDispachToProps = dispatch => {\n  return {\n    deleteSelectedRows: seletedRowIds => {\n      dispatch({\n        type: \"delete_event_data\",\n        data: seletedRowIds\n      });\n    },\n    handleIsShowOnCalander: row_id => {\n      dispatch({\n        type: \"set_isShowOnCalander\",\n        data: row_id\n      });\n    },\n    deleteSelectedRows: seletedRowIds => {\n      dispatch({\n        type: \"delete_user_data\",\n        data: seletedRowIds\n      });\n    },\n    handleTableSearch: searcheddata => {\n      dispatch({\n        type: \"search_user_tables_data\",\n        data: searcheddata\n      });\n    } //* handleTableSearch:(searcheddata)=>{\n    //     dispatch({type:\"search_events_tables_data\", data:searcheddata})\n    // }*/\n\n  };\n};\n\nTablecontainer.propTypes = {\n  eventsList: PropTypes.array.isRequired,\n  deleteEventsSelectedRows: PropTypes.func.isRequired,\n  handleIsShowOnCalander: PropTypes.func.isRequired,\n  usersList: PropTypes.array.isRequired,\n  deleteUserSelectedRows: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispachToProps)(Tablecontainer);\n;","map":{"version":3,"sources":["C:/projects/spectrum/src/container/tablecontainer.js"],"names":["React","Usertable","Eventtable","userColumns","eventColumns","Container","Box","connect","PropTypes","Tablecontainer","handleTableSearch","value","searcheddata","user_ids_event","flag","regex","RegExp","EventData","props","eventsList","filterData","filter","organizer","match","Set","registerd_user","setModelData","modelData","calanderDataList","searchFilterValue","mapStateToProps","state","usersList","mapDispachToProps","dispatch","deleteSelectedRows","seletedRowIds","type","data","handleIsShowOnCalander","row_id","propTypes","array","isRequired","deleteEventsSelectedRows","func","deleteUserSelectedRows"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Usertable from '../component/userTable'\r\nimport Eventtable from '../component/eventTable'\r\nimport { userColumns } from '../data/Userdata';\r\nimport { eventColumns } from '../data/EventData';\r\nimport {Container, Box } from '@material-ui/core';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nfunction Tablecontainer() {\r\n    const handleTableSearch=(value)=>{\r\n        let searcheddata=value;\r\n                let user_ids_event=[];\r\n                let flag=false;\r\n                let regex = new RegExp(searcheddata, 'gi')\r\n\r\n                let EventData=props.eventsList;\r\n                let filterData= EventData.filter((value) => {\r\n                    flag=value.organizer.match(regex)\r\n                    if(flag){\r\n                        //events_ids.push(value.index);\r\n                        user_ids_event=[...new Set([...user_ids_event, ...value.registerd_user])];\r\n                        return true;                        \r\n                    }else{\r\n                     return false;\r\n                    }\r\n                                            \r\n                });\r\n\r\n                setModelData({...modelData, calanderDataList:filterData, searchFilterValue:value});\r\n            //    userFilterData = state.usersList.filter((element) => {\r\n            //         return user_ids_event.includes(element.index);                                    \r\n            //     });\r\n\r\n            // newState = {\r\n            //     ...state,\r\n            //     eventsList: filterData,\r\n            //     usersList: userFilterData\r\n            // };\r\n            \r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Box my={2}>\r\n                <Usertable columns={userColumns} title={'User List'} />\r\n                <Eventtable columns={eventColumns} title={'Event List'} />           \r\n                \r\n            </Box>\r\n        </Container>\r\n\r\n\r\n\r\n    );\r\n}\r\nconst mapStateToProps=(state)=>{\r\n  return {\r\n    eventsList:state.eventsList,\r\n    usersList: state.usersList\r\n  }\r\n}\r\nconst mapDispachToProps=(dispatch)=>{\r\n  return {\r\n    deleteSelectedRows:(seletedRowIds)=>{\r\n      dispatch({type:\"delete_event_data\", data:seletedRowIds})\r\n    },\r\n    handleIsShowOnCalander:(row_id)=>{\r\n      dispatch({type:\"set_isShowOnCalander\", data:row_id})\r\n    },\r\n    deleteSelectedRows:(seletedRowIds)=>{\r\n        dispatch({type:\"delete_user_data\", data:seletedRowIds})\r\n    },\r\n    handleTableSearch:(searcheddata)=>{\r\n        dispatch({type:\"search_user_tables_data\", data:searcheddata})\r\n    }\r\n\r\n    //* handleTableSearch:(searcheddata)=>{\r\n    //     dispatch({type:\"search_events_tables_data\", data:searcheddata})\r\n    // }*/\r\n\r\n  }\r\n}\r\nTablecontainer.propTypes={   \r\n  eventsList:PropTypes.array.isRequired,\r\n  deleteEventsSelectedRows:PropTypes.func.isRequired,\r\n  handleIsShowOnCalander:PropTypes.func.isRequired,\r\n  usersList:PropTypes.array.isRequired,\r\n  deleteUserSelectedRows:PropTypes.func.isRequired \r\n}\r\n\r\nexport default  connect(mapStateToProps, mapDispachToProps)(Tablecontainer);;"]},"metadata":{},"sourceType":"module"}