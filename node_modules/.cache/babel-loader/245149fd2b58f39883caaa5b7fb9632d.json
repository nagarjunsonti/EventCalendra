{"ast":null,"code":"\"use strict\";\n\nvar noop = require(\"es5-ext/function/noop\"),\n    objForEach = require(\"es5-ext/object/for-each\"),\n    d = require(\"d\");\n\nmodule.exports = {\n  // Should logger logs be exposed?\n  isEnabled: d(\"ew\", true),\n  // Enables logger and all its namespaced children\n  enable: d(function () {\n    return this._setEnabledState(true);\n  }),\n  // Disables logger and all its namespaced children\n  disable: d(function () {\n    return this._setEnabledState(false);\n  }),\n  _setEnabledState: d(function (state) {\n    var cache = [];\n\n    this._setEnabledStateRecursively(state, cache);\n\n    var result = {\n      restore: function () {\n        cache.forEach(function (data) {\n          if (data.hasDirectSetting) data.logger.isEnabled = !state;else delete data.logger.isEnabled;\n        });\n        result.restore = noop;\n      }\n    };\n    return result;\n  }),\n  _setEnabledStateRecursively: d(function (newState, cache) {\n    if (this.isEnabled !== newState) {\n      cache.push({\n        logger: this,\n        hasDirectSetting: hasOwnProperty.call(this, \"isEnabled\")\n      });\n      this.isEnabled = newState;\n    }\n\n    objForEach(this._childNamespaceLoggers, function (namespacedLogger) {\n      namespacedLogger._setEnabledStateRecursively(newState, cache);\n    });\n  })\n};","map":null,"metadata":{},"sourceType":"script"}