{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\component\\\\eventTable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport TableWidget from '../widgets/TableWidget';\nimport { connect } from 'react-redux';\nimport SideBarcomponent from './SideBarcomponent';\nimport PropTypes from 'prop-types';\n\nfunction Eventtable(props) {\n  let title = props.title,\n      columns = props.columns,\n      eventsList = props.eventsList;\n\n  let _useState = useState({\n    modelOpen: false,\n    calanderDataList: eventsList,\n    showAddTable: false,\n    searchFilterValue: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      modelData = _useState2[0],\n      setModelData = _useState2[1];\n\n  useEffect(() => {\n    setModelData(_objectSpread({}, modelData, {\n      calanderDataList: eventsList\n    }));\n  }, [eventsList]);\n\n  const handleClickModelOpen = data => {\n    console.log(data);\n    let popupData = [data];\n    setModelData({\n      modelOpen: true,\n      calanderDataList: popupData\n    }); //eventsArray=data;\n    //setModelOpen(true);\n  };\n\n  const handleClickModelClose = data => {\n    console.log(data);\n    setModelData(_objectSpread({}, modelData, {\n      modelOpen: false\n    }));\n  };\n\n  const actionColumn = [{\n    title: \"View event\",\n    // handleViewAction:{handleClickModelClose}\n    callBack: handleClickModelOpen,\n    icon: \"view\"\n  }, {\n    title: \"Hide event on calander\",\n    icon: \"switch\"\n  }];\n  const modelOpen = modelData.modelOpen,\n        calanderDataList = modelData.calanderDataList,\n        searchFilterValue = modelData.searchFilterValue;\n\n  const handleTableSearch = value => {\n    let searcheddata = value;\n    let user_ids_event = [];\n    let flag = false;\n    let regex = new RegExp(searcheddata, 'gi');\n    let EventData = props.eventsList;\n    let filterData = EventData.filter(value => {\n      flag = value.organizer.match(regex);\n\n      if (flag) {\n        //events_ids.push(value.index);\n        user_ids_event = [...new Set([...user_ids_event, ...value.registerd_user])];\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setModelData(_objectSpread({}, modelData, {\n      calanderDataList: filterData,\n      searchFilterValue: value\n    })); //    userFilterData = state.usersList.filter((element) => {\n    //         return user_ids_event.includes(element.index);                                    \n    //     });\n    // newState = {\n    //     ...state,\n    //     eventsList: filterData,\n    //     usersList: userFilterData\n    // };\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(TableWidget, {\n    rows: modelData.calanderDataList,\n    defaultSort: \"name\",\n    columns: columns,\n    tableTitle: title,\n    actionColumn: actionColumn,\n    openModelClick: handleClickModelOpen,\n    handleToolBarAction: props.deleteSelectedRows,\n    handleEventDisplayToggle: props.handleIsShowOnCalander,\n    handleTableSearch: handleTableSearch,\n    searchPlaceholder: \"Search By Organizer\",\n    searchFilterValue: searchFilterValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(SideBarcomponent, {\n    modelOpen: modelOpen,\n    closeModelClick: handleClickModelClose,\n    calanderDataList: calanderDataList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    eventsList: state.eventsList\n  };\n};\n\nconst mapDispachToProps = dispatch => {\n  return {\n    deleteSelectedRows: seletedRowIds => {\n      dispatch({\n        type: \"delete_event_data\",\n        data: seletedRowIds\n      });\n    },\n    handleIsShowOnCalander: row_id => {\n      dispatch({\n        type: \"set_isShowOnCalander\",\n        data: row_id\n      });\n    } //* handleTableSearch:(searcheddata)=>{\n    //     dispatch({type:\"search_events_tables_data\", data:searcheddata})\n    // }*/\n\n  };\n};\n\nEventtable.propTypes = {\n  title: PropTypes.string.isRequired,\n  columns: PropTypes.array.isRequired,\n  eventsList: PropTypes.array.isRequired,\n  deleteSelectedRows: PropTypes.func.isRequired,\n  handleIsShowOnCalander: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispachToProps)(Eventtable);","map":{"version":3,"sources":["C:/projects/spectrum/src/component/eventTable.js"],"names":["React","useState","useEffect","TableWidget","connect","SideBarcomponent","PropTypes","Eventtable","props","title","columns","eventsList","modelOpen","calanderDataList","showAddTable","searchFilterValue","modelData","setModelData","handleClickModelOpen","data","console","log","popupData","handleClickModelClose","actionColumn","callBack","icon","handleTableSearch","value","searcheddata","user_ids_event","flag","regex","RegExp","EventData","filterData","filter","organizer","match","Set","registerd_user","deleteSelectedRows","handleIsShowOnCalander","mapStateToProps","state","mapDispachToProps","dispatch","seletedRowIds","type","row_id","propTypes","string","isRequired","array","func"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport TableWidget from '../widgets/TableWidget';\r\nimport {connect} from 'react-redux';\r\nimport SideBarcomponent from './SideBarcomponent';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Eventtable(props){\r\n    let {title, columns, eventsList}=props;    \r\n    \r\n    let [modelData, setModelData]=useState({\r\n      modelOpen:false,\r\n      calanderDataList:eventsList,\r\n      showAddTable:false,\r\n      searchFilterValue:\"\"\r\n    });    \r\n\r\n    useEffect(()=>{\r\n      setModelData({\r\n        ...modelData,\r\n        calanderDataList:eventsList\r\n      })\r\n\r\n    },[eventsList])\r\n    const handleClickModelOpen=(data)=>{\r\n        console.log(data);\r\n        let popupData=[data];\r\n        setModelData({modelOpen:true,calanderDataList:popupData});\r\n        //eventsArray=data;\r\n        //setModelOpen(true);\r\n    }\r\n    const handleClickModelClose=(data)=>{\r\n        console.log(data);\r\n        setModelData({...modelData, modelOpen:false});\r\n    }\r\n    const actionColumn=[\r\n        {\r\n          title:\"View event\",\r\n          // handleViewAction:{handleClickModelClose}\r\n          callBack:handleClickModelOpen,\r\n          icon:\"view\"\r\n        },        \r\n        {\r\n          title:\"Hide event on calander\",          \r\n          icon:\"switch\"\r\n        }        \r\n    ];\r\n    const {modelOpen, calanderDataList, searchFilterValue}=modelData;\r\n    const handleTableSearch=(value)=>{\r\n        let searcheddata=value;\r\n                let user_ids_event=[];\r\n                let flag=false;\r\n                let regex = new RegExp(searcheddata, 'gi')\r\n\r\n                let EventData=props.eventsList;\r\n                let filterData= EventData.filter((value) => {\r\n                    flag=value.organizer.match(regex)\r\n                    if(flag){\r\n                        //events_ids.push(value.index);\r\n                        user_ids_event=[...new Set([...user_ids_event, ...value.registerd_user])];\r\n                        return true;                        \r\n                    }else{\r\n                     return false;\r\n                    }\r\n                                            \r\n                });\r\n\r\n                setModelData({...modelData, calanderDataList:filterData, searchFilterValue:value});\r\n            //    userFilterData = state.usersList.filter((element) => {\r\n            //         return user_ids_event.includes(element.index);                                    \r\n            //     });\r\n\r\n            // newState = {\r\n            //     ...state,\r\n            //     eventsList: filterData,\r\n            //     usersList: userFilterData\r\n            // };\r\n            \r\n    }\r\n    return (\r\n        <React.Fragment>            \r\n            <TableWidget \r\n              rows={modelData.calanderDataList} \r\n              defaultSort='name'\r\n              columns={columns}\r\n              tableTitle={title}\r\n              actionColumn={actionColumn}\r\n              openModelClick={handleClickModelOpen} \r\n              handleToolBarAction={props.deleteSelectedRows}\r\n              handleEventDisplayToggle={props.handleIsShowOnCalander}    \r\n              handleTableSearch={handleTableSearch}\r\n              searchPlaceholder=\"Search By Organizer\"\r\n              searchFilterValue={searchFilterValue}                      \r\n            />\r\n            <SideBarcomponent \r\n                    modelOpen={modelOpen}                    \r\n                    closeModelClick={handleClickModelClose}\r\n                    calanderDataList={calanderDataList}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n  return {\r\n    eventsList:state.eventsList\r\n  }\r\n}\r\nconst mapDispachToProps=(dispatch)=>{\r\n  return {\r\n    deleteSelectedRows:(seletedRowIds)=>{\r\n      dispatch({type:\"delete_event_data\", data:seletedRowIds})\r\n    },\r\n    handleIsShowOnCalander:(row_id)=>{\r\n      dispatch({type:\"set_isShowOnCalander\", data:row_id})\r\n    }\r\n\r\n    //* handleTableSearch:(searcheddata)=>{\r\n    //     dispatch({type:\"search_events_tables_data\", data:searcheddata})\r\n    // }*/\r\n\r\n  }\r\n}\r\nEventtable.propTypes={\r\n  title:PropTypes.string.isRequired,\r\n  columns:PropTypes.array.isRequired,\r\n  eventsList:PropTypes.array.isRequired,\r\n  deleteSelectedRows:PropTypes.func.isRequired,\r\n  handleIsShowOnCalander:PropTypes.func.isRequired\r\n}\r\nexport default connect(mapStateToProps, mapDispachToProps)(Eventtable);"]},"metadata":{},"sourceType":"module"}