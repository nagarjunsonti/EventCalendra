{"ast":null,"code":"/*!\n * Cluster - pidfiles\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = require('fs'),\n    mkdir = require('mkdirp').mkdirp;\n/**\n * Save pidfiles to the given `dir` or `./pids`.\n *\n * Examples:\n *\n *    // save to ./pids\n *    cluster(server)\n *      .use(cluster.pidfiles())\n *      .listen(3000);\n *\n *    // save to /tmp\n *    cluster(server)\n *      .use(cluster.pidfiles('/tmp'))\n *      .listen(3000);\n *\n *    // save to /var/run/node\n *    cluster(server)\n *      .use(cluster.logger('/var/run/node'))\n *      .listen(3000);\n *\n * @param {String} dir\n * @return {Function}\n * @api public\n */\n\n\nmodule.exports = function (dir) {\n  return function (master) {\n    dir = master.pidfiles = master.resolve(dir || 'pids'); // augment master\n\n    master.pidof = function (name) {\n      var dir = master.pidfiles,\n          path = dir + '/' + name + '.pid',\n          pid = fs.readFileSync(path, 'ascii');\n      return parseInt(pid, 10);\n    };\n\n    master.workerpids = function () {\n      var dir = master.pidfiles;\n      return fs.readdirSync(dir).filter(function (file) {\n        return file.match(/^worker\\./);\n      }).map(function (file) {\n        return parseInt(fs.readFileSync(dir + '/' + file, 'ascii'), 10);\n      });\n    };\n\n    mkdir(dir, 0755, function (err) {\n      if (err) throw err; // save worker pids\n\n      master.on('worker', function (worker) {\n        var path = dir + '/worker.' + worker.id + '.pid';\n        fs.writeFile(path, worker.proc.pid.toString(), 'ascii', function (err) {\n          if (err) throw err;\n          master.emit('worker pidfile');\n        });\n      });\n      master.on('listening', function () {\n        // save master pid\n        fs.writeFile(dir + '/master.pid', process.pid.toString(), 'ascii', function (err) {\n          if (err) throw err;\n          master.emit('pidfile');\n        });\n      });\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}