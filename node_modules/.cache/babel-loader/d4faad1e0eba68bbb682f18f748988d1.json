{"ast":null,"code":"/*!\n * Cluster - cli\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = require('fs'),\n    Log = require('log');\n/**\n * Commands.\n */\n\n\nvar commands = [];\n/**\n * Adds a command-line interface to your cluster.\n *\n * This plugin requires that you use `pidfiles()`\n * above `cli()`, so that the pidfile directory\n * is exposed.\n *\n * Examples:\n *\n *     cluster(server)\n *       .use(cluster.pidfiles())\n *       .use(cluster.cli())\n *       .listen(3000);\n *\n * Once set up our server script serves as both\n * the master, and the CLI. For example we may\n * still launch the server(s) as shown below.\n *\n *      $ nohup node server.js &\n *\n * However now we may also utilize commands\n * provided by this plugin.\n *\n *     $ node server.js status\n *\n *       master 3281 dead\n *       worker 0 3282 dead\n *\n * For more command information use `--help`.\n *\n *     $ node server.js --help\n *\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function () {\n  return function (master) {\n    requirePIDs(master); // augment master\n\n    master.killall = function (sig) {\n      var pid = master.pidof('master');\n\n      try {\n        // signal master\n        process.kill(pid, sig);\n      } catch (err) {\n        if ('ESRCH' != err.code) throw err; // signal children individually\n\n        master.workerpids().forEach(function (pid) {\n          try {\n            process.kill(pid, sig);\n          } catch (err) {\n            if ('ESRCH' != err.code) throw err;\n          }\n        });\n      }\n    };\n\n    var args = process.argv.slice(2),\n        len = commands.length,\n        command,\n        arg; // parse arguments\n\n    while (args.length) {\n      arg = args.shift();\n\n      for (var i = 0; i < len; ++i) {\n        command = commands[i];\n\n        if (~command.flags.indexOf(arg)) {\n          command.callback(master);\n          master.preventDefault = true;\n        }\n      }\n    }\n  };\n};\n/**\n * Define command `name` with the given callback `fn(master)`\n * and a short `desc`.\n *\n * @param {String} name\n * @param {Function} fn\n * @param {String} desc\n * @return {Object} exports for chaining\n * @api public\n */\n\n\nvar define = exports.define = function (name, fn, desc) {\n  commands.push({\n    flags: name.split(/ *, */),\n    desc: desc,\n    callback: fn\n  });\n  return exports;\n};\n/**\n * Report master / worker status based on\n * the PID files saved by the pidfiles()\n * plugin.\n */\n\n\ndefine('-s, --status, status', function (master) {\n  var dir = master.pidfiles,\n      files = fs.readdirSync(dir); // null signal failed previous\n  // to this release\n\n  if (process.version < 'v0.4.1') {\n    console.log('status will not work with node < 0.4.1');\n    console.log('due to SIGTERM globbering the null signal');\n    process.exit(1);\n  }\n\n  console.log(); // only pids\n\n  files.filter(function (file) {\n    return file.match(/\\.pid$/); // check status\n  }).forEach(function (file) {\n    var name = file.replace('.pid', ''),\n        pid = master.pidof(name),\n        name = name.replace('.', ' '),\n        color,\n        status;\n\n    try {\n      process.kill(pid, 0);\n      status = 'alive';\n      color = '36';\n    } catch (err) {\n      if ('ESRCH' == err.code) {\n        color = '31';\n        status = 'dead';\n      } else {\n        throw err;\n      }\n    }\n\n    console.log('  %s\\033[90m %d\\033[0m \\033[' + color + 'm%s\\033[0m', name, pid, status);\n  });\n  console.log();\n}, 'Output cluster status');\n/**\n * Restart workers.\n */\n\ndefine('-r, --restart, restart', function (master) {\n  master.killall('SIGUSR2');\n}, 'Restart master by sending the SIGUSR2 signal');\n/**\n * Graceful shutdown.\n */\n\ndefine('-g, --shutdown, shutdown', function (master) {\n  master.killall('SIGQUIT');\n}, 'Graceful shutdown by sending the SIGQUIT signal');\n/**\n * Hard shutdown.\n */\n\ndefine('-S, --stop, stop', function (master) {\n  master.killall('SIGTERM');\n}, 'Hard shutdown by sending the SIGTERM signal');\n/**\n * Display help information.\n */\n\ndefine('-h, --help, help', function (master) {\n  console.log('\\n  Usage: node <file> <command>\\n');\n  commands.forEach(function (command) {\n    console.log('    ' + command.flags.join(', ') + '\\n    ' + '\\033[90m' + command.desc + '\\033[0m' + '\\n');\n  });\n  console.log();\n}, 'Show help information');\n/**\n * Output cluster version.\n */\n\ndefine('-v, --version', function (master) {\n  console.log(require('../cluster').version);\n}, 'Output cluster version');\n/**\n * Require `pidfiles()` plugin.\n *\n * @param {Master} master\n * @api private\n */\n\nfunction requirePIDs(master) {\n  if (master.pidfiles) return;\n  throw new Error('cli() plugin requires pidfiles(), please add pidfiles() before cli()');\n}","map":null,"metadata":{},"sourceType":"script"}