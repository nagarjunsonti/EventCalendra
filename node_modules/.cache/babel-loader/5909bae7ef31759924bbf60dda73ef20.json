{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\component\\\\SideBarcomponent.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport { CssBaseline, Container, Box } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from \"moment\";\nimport AddEventsTable from './AddEventsTable';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport './sidebarCss.css';\nimport Modal from '@material-ui/core/Modal';\nimport { connect } from 'react-redux';\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n    flexDirection: 'rowReverse'\n  },\n  paper: {\n    position: 'absolute',\n    width: 600,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\nconst localizer = momentLocalizer(moment);\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n});\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n  return {\n    top: \"\".concat(top, \"%\"),\n    left: \"\".concat(left, \"%\"),\n    transform: \"translate(-\".concat(top, \"%, -\").concat(left, \"%)\")\n  };\n}\n\nfunction SideBarcomponent(props) {\n  //const [modelOpen, closeModelClick]=props;\n  const modelOpen = props.modelOpen,\n        calanderDataList = props.calanderDataList,\n        closeModelClick = props.closeModelClick,\n        showAddTable = props.showAddTable;\n  const classes = useStyles();\n\n  const _useState = useState(getModalStyle),\n        _useState2 = _slicedToArray(_useState, 1),\n        modalStyle = _useState2[0];\n\n  const _useState3 = useState({\n    eventModelOpen: false,\n    eventModeltitle: \"\",\n    data: {}\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        eventModelObj = _useState4[0],\n        seteventModelObj = _useState4[1]; //const {dataList} = props;\n  //const [modelOpen, setOpen] = React.useState(false);\n  //   const handleClickOpen = () => {\n  //     setOpen(true);\n  //   };\n  // const closeModelClick = () => {\n  //   setOpen(false);\n  // };\n\n\n  let eventsArrayList = [];\n\n  if (calanderDataList && calanderDataList.length) {\n    calanderDataList.forEach(element => {\n      if (!element.isShowOnCalander) {\n        let data = {\n          id: element.index,\n          start: moment(element.scheduledfor).toDate(),\n          end: moment(element.endScheduar).toDate(),\n          eventClasses: 'optionalEvent',\n          title: element.organizer,\n          description: element.about,\n          orginalData: element\n        };\n        eventsArrayList.push(data);\n      }\n    });\n  }\n\n  const getRegisteredusers = registerd_user => {\n    let usersList = props.usersList;\n    let usersName = [];\n    usersList.forEach(element => {\n      if (registerd_user.includes(element.index)) ;\n      usersName.push(element.name);\n    });\n    return usersName;\n  };\n\n  const getFormatDate = date => {\n    let formateDate = moment(date).format(\"DD-MM-YYYY h:mm a\");\n    return formateDate;\n  };\n\n  const handleEventModelOpen = data => {\n    seteventModelObj(_objectSpread({}, eventModelObj, {\n      eventModelOpen: true,\n      eventModeltitle: data.title,\n      data: {\n        startTime: getFormatDate(data.start),\n        entTime: getFormatDate(data.end),\n        description: data.description,\n        organizer: data.orginalData.organizer,\n        company: data.orginalData.company,\n        usersList: getRegisteredusers(data.orginalData.registerd_user)\n      }\n    }));\n  };\n\n  const handleEventModelClose = () => {\n    seteventModelObj(_objectSpread({}, eventModelObj, {\n      eventModelOpen: false\n    }));\n  }; // const eventsArray = [\n  //   {\n  //     start: new Date(),\n  //     end: new Date(moment().add(1, \"hours\")),\n  //     eventClasses: 'optionalEvent',\n  //     title: 'test event',\n  //     description: 'This is a test description of an event',\n  //   },\n  //   {\n  //     start: new Date(moment().add(1, \"days\")),\n  //     end: new Date(moment().add(1, \"days\").add(2, \"hours\")),\n  //     title: 'test event',\n  //     description: 'This is a test description of an event',\n  //     data: 'you can add what ever random data you may want to use later',\n  //   },\n  // ];\n\n\n  const handleEventSelectEvent = data => {\n    handleEventModelOpen(data);\n    debugger;\n  };\n\n  const getEventModelUsersContent = () => {\n    let content = React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \" \\\"No Users are registered for this event\\\" \");\n\n    if (eventModelObj.data.usersList) {\n      content = eventModelObj.data.usersList.map(user => React.createElement(\"li\", {\n        key: user + \"_id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, user));\n    }\n\n    return content;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    fullScreen: true,\n    open: modelOpen,\n    onClose: closeModelClick,\n    TransitionComponent: Transition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'sidebarHeaderDiv',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'sideBarTitleDiv',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"\".concat(props.sideBarTitle, \" events\"))), React.createElement(\"div\", {\n    className: \"closeButtonDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    edge: \"start\",\n    color: \"inherit\",\n    onClick: closeModelClick,\n    \"aria-label\": \"close\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(CloseIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  })))))), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(Box, {\n    my: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"sidebarContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, showAddTable ? React.createElement(AddEventsTable, {\n    addUserData: calanderDataList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }) : React.createElement(Calendar, {\n    localizer: localizer,\n    defaultDate: new Date(),\n    defaultView: \"month\",\n    events: eventsArrayList,\n    style: {\n      height: \"80vh\"\n    },\n    onSelectEvent: event => handleEventSelectEvent(event),\n    onSelectSlot: handleEventSelectEvent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }))), React.createElement(Modal, {\n    \"aria-labelledby\": \"simple-modal-title\",\n    \"aria-describedby\": \"simple-modal-description\",\n    open: eventModelObj.eventModelOpen,\n    onClose: handleEventModelClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: modalStyle,\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    id: \"simple-modal-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, eventModelObj.eventModeltitle), React.createElement(\"div\", {\n    className: \"eventModelDescriptionContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"descriptionHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'childBlockDiv',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"labelSpan\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"Organizer\"), \": \", eventModelObj.data.organizer, \" \"), React.createElement(\"div\", {\n    className: 'childBlockDiv',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"labelSpan\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"Company:\"), \" \", eventModelObj.data.company)), React.createElement(\"div\", {\n    className: \"descriptionTimeSlopt\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'childBlockDiv',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"labelSpan\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"Start Time: \"), \" \", eventModelObj.data.startTime), React.createElement(\"div\", {\n    className: 'childBlockDiv',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"labelSpan\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \"End time:\"), \" \", eventModelObj.data.entTime), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"labelSpan\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"Description\"), \": \", eventModelObj.data.description)), React.createElement(\"div\", {\n    className: \"usersListDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"Registered users \"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, getEventModelUsersContent()))))))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    usersList: state.usersList\n  };\n};\n\nexport default connect(mapStateToProps)(SideBarcomponent);","map":{"version":3,"sources":["C:/projects/spectrum/src/component/SideBarcomponent.js"],"names":["React","useState","makeStyles","Dialog","CssBaseline","Container","Box","AppBar","Toolbar","IconButton","CloseIcon","Slide","Calendar","momentLocalizer","moment","AddEventsTable","Modal","connect","useStyles","theme","appBar","position","title","marginLeft","spacing","flex","flexDirection","paper","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","localizer","Transition","forwardRef","props","ref","rand","Math","round","random","getModalStyle","top","left","transform","SideBarcomponent","modelOpen","calanderDataList","closeModelClick","showAddTable","classes","modalStyle","eventModelOpen","eventModeltitle","data","eventModelObj","seteventModelObj","eventsArrayList","length","forEach","element","isShowOnCalander","id","index","start","scheduledfor","toDate","end","endScheduar","eventClasses","organizer","description","about","orginalData","push","getRegisteredusers","registerd_user","usersList","usersName","includes","name","getFormatDate","date","formateDate","format","handleEventModelOpen","startTime","entTime","company","handleEventModelClose","handleEventSelectEvent","getEventModelUsersContent","content","map","user","sideBarTitle","Date","height","event","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { CssBaseline, Container, Box } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport moment from \"moment\";\r\nimport AddEventsTable from './AddEventsTable'\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport './sidebarCss.css';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport {connect} from 'react-redux';\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n    flexDirection: 'rowReverse'\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 600,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nconst localizer = momentLocalizer(moment)\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nfunction SideBarcomponent(props) {\r\n  //const [modelOpen, closeModelClick]=props;\r\n  const { modelOpen, calanderDataList, closeModelClick, showAddTable } = props;\r\n  const classes = useStyles();\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [eventModelObj, seteventModelObj] = useState({\r\n    eventModelOpen:false,\r\n    eventModeltitle:\"\",\r\n    data:{}\r\n  });\r\n  //const {dataList} = props;\r\n  //const [modelOpen, setOpen] = React.useState(false);\r\n\r\n  //   const handleClickOpen = () => {\r\n  //     setOpen(true);\r\n  //   };\r\n\r\n  // const closeModelClick = () => {\r\n  //   setOpen(false);\r\n  // };\r\n  let eventsArrayList = [];\r\n  if (calanderDataList && calanderDataList.length) {\r\n\r\n    calanderDataList.forEach(element => {\r\n      if (!element.isShowOnCalander) {\r\n        let data = {\r\n          id: element.index,\r\n          start: moment(element.scheduledfor).toDate(),\r\n          end: moment(element.endScheduar).toDate(),\r\n          eventClasses: 'optionalEvent',\r\n          title: element.organizer,\r\n          description: element.about,\r\n          orginalData:element\r\n        }\r\n        eventsArrayList.push(data);\r\n      }\r\n    });\r\n  }\r\n  const getRegisteredusers=(registerd_user)=>{\r\n    let usersList=props.usersList;\r\n    let usersName=[];\r\n      usersList.forEach((element)=>{\r\n        if(registerd_user.includes(element.index));\r\n          usersName.push(element.name);\r\n      })\r\n\r\n      return usersName;\r\n  }\r\n  const getFormatDate = (date) => {\r\n    let formateDate = moment(date).format(\"DD-MM-YYYY h:mm a\");\r\n    return formateDate;\r\n  }\r\n  const handleEventModelOpen = (data) => {\r\n\r\n    seteventModelObj({ \r\n        ...eventModelObj, \r\n        eventModelOpen:true, \r\n        eventModeltitle:data.title,\r\n        data:{\r\n            startTime:getFormatDate(data.start),\r\n            entTime:getFormatDate(data.end),\r\n            description:data.description,\r\n            organizer:data.orginalData.organizer,\r\n            company:data.orginalData.company,\r\n            usersList:getRegisteredusers(data.orginalData.registerd_user)\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleEventModelClose = () => {\r\n     seteventModelObj({ ...eventModelObj, eventModelOpen:false});\r\n  };\r\n\r\n  // const eventsArray = [\r\n  //   {\r\n  //     start: new Date(),\r\n  //     end: new Date(moment().add(1, \"hours\")),\r\n  //     eventClasses: 'optionalEvent',\r\n  //     title: 'test event',\r\n  //     description: 'This is a test description of an event',\r\n  //   },\r\n  //   {\r\n  //     start: new Date(moment().add(1, \"days\")),\r\n  //     end: new Date(moment().add(1, \"days\").add(2, \"hours\")),\r\n  //     title: 'test event',\r\n  //     description: 'This is a test description of an event',\r\n  //     data: 'you can add what ever random data you may want to use later',\r\n  //   },\r\n  // ];\r\n  const handleEventSelectEvent = (data) => {\r\n    handleEventModelOpen(data);\r\n    debugger;\r\n  }\r\n   \r\n  const getEventModelUsersContent=()=>{\r\n    let content=<li> \"No Users are registered for this event\" </li>;\r\n    if(eventModelObj.data.usersList){\r\n      content = eventModelObj.data.usersList.map((user) =>\r\n        <li key={user+\"_id\"}>\r\n          {user}\r\n        </li>\r\n      );\r\n    }     \r\n\r\n    return content;\r\n\r\n  }\r\n  return (\r\n    <div>\r\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open full-screen dialog\r\n      </Button> */}\r\n\r\n      <Dialog fullScreen open={modelOpen} onClose={closeModelClick} TransitionComponent={Transition}>\r\n        <div className={'sidebarHeaderDiv'}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <div className={'sideBarTitleDiv'}><h2>{`${props.sideBarTitle} events` }</h2></div>\r\n            <div className={\"closeButtonDiv\"}>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={closeModelClick} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n        <CssBaseline />\r\n        <Container>          \r\n          <Box my={2}>\r\n            <div className={\"sidebarContainer\"}>\r\n              {(showAddTable) ? <AddEventsTable addUserData={calanderDataList}/> : <Calendar\r\n                localizer={localizer}\r\n                defaultDate={new Date()}\r\n                defaultView=\"month\"\r\n                events={eventsArrayList}\r\n                style={{ height: \"80vh\" }}\r\n                onSelectEvent={event => handleEventSelectEvent(event)}\r\n                onSelectSlot={handleEventSelectEvent}\r\n              />}\r\n            </div>\r\n          </Box>\r\n          <Modal\r\n              aria-labelledby=\"simple-modal-title\"\r\n              aria-describedby=\"simple-modal-description\"\r\n              open={eventModelObj.eventModelOpen}\r\n              onClose={handleEventModelClose}\r\n            >\r\n              <div style={modalStyle} className={classes.paper}>\r\n                <h2 id=\"simple-modal-title\">{eventModelObj.eventModeltitle}</h2>\r\n                <div className=\"eventModelDescriptionContainer\">\r\n                  <div className=\"descriptionHeader\">\r\n                    <div className={'childBlockDiv'}><span className=\"labelSpan\">Organizer</span>: {eventModelObj.data.organizer} </div>\r\n                    <div className={'childBlockDiv'}><span className=\"labelSpan\">Company:</span> {eventModelObj.data.company}</div>\r\n                  </div>\r\n                  <div className=\"descriptionTimeSlopt\">\r\n                    <div className={'childBlockDiv'}><span className=\"labelSpan\">Start Time: </span> {eventModelObj.data.startTime}</div>\r\n                    <div className={'childBlockDiv'}><span className=\"labelSpan\">End time:</span> {eventModelObj.data.entTime}</div>\r\n                    <div><span className=\"labelSpan\">Description</span>: {eventModelObj.data.description}</div> \r\n                  </div>                  \r\n                  <div className=\"usersListDiv\">\r\n                    <h3>Registered users </h3>\r\n                    <ul>\r\n                      {getEventModelUsersContent()}\r\n                    </ul>\r\n\r\n                  </div>\r\n                </div>            \r\n              </div>\r\n      </Modal>      \r\n        </Container>\r\n      </Dialog>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps=(state)=>{\r\n  return {    \r\n    usersList: state.usersList\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(SideBarcomponent);"]},"metadata":{},"sourceType":"module"}