{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  usersList: [],\n  eventsList: []\n};\n\nconst reducer = (state = initialState, action) => {\n  let newState = _objectSpread({}, state);\n\n  let filterData = \"\";\n  let searcheddata = \"\";\n  let flag = false;\n  let regex = \"\";\n  let userFilterData = \"\";\n\n  switch (action.type) {\n    case \"get_user_event_data\":\n      newState = _objectSpread({}, state, {\n        usersList: action.data[0].UserRows,\n        eventsList: action.data[1].EventRows\n      });\n      return newState;\n\n    case \"delete_user_data\":\n      userFilterData = state.usersList.filter(value => {\n        return !action.data.includes(value.index);\n      });\n      filterData = state.eventsList;\n      filterData.forEach(element => {\n        action.data.forEach(value => {\n          let valueindex = element.registerd_user.indexOf(value);\n\n          if (valueindex !== -1) {\n            element.registerd_user.splice(valueindex, 1);\n          }\n        });\n      });\n      newState = _objectSpread({}, state, {\n        usersList: userFilterData,\n        eventsList: filterData\n      });\n      return newState;\n\n    case \"delete_event_data\":\n      let user_ids_event_list = [];\n      filterData = state.eventsList.filter(value => {\n        if (action.data.includes(value.index)) {\n          user_ids_event_list = [...new Set([...user_ids_event_list, ...value.registerd_user])];\n          return false;\n        }\n\n        return true;\n      });\n      userFilterData = state.usersList; // userFilterData= state.usersList.filter((value) => {\n      //   return (!user_ids_event_list.includes(value.index));\n      // });\n\n      userFilterData.forEach(element => {\n        if (user_ids_event_list.includes(element.index)) {\n          element.registeredevents = element.registeredevents !== 0 ? element.registeredevents - 1 : 0;\n        }\n      });\n      newState = _objectSpread({}, state, {\n        usersList: userFilterData,\n        eventsList: filterData\n      });\n      return newState;\n\n    case \"set_isShowOnCalander\":\n      filterData = state.eventsList.map(value => {\n        if (value.index === action.data) {\n          value.isShowOnCalander = !value.isShowOnCalander;\n        }\n\n        return value;\n      });\n      newState = _objectSpread({}, state, {\n        eventsList: filterData\n      });\n      return newState;\n\n    case \"add_event_data\":\n      let selectedEvents = action.data.eventsId;\n      let selectedUser = action.data.addUserData;\n      userFilterData = state.usersList;\n      let selectedEventsLength = selectedEvents.lenth;\n      filterData = state.eventsList.map(value => {\n        if (selectedEvents.includes(value.index)) {\n          value.registerd_user.push(selectedUser.index);\n        }\n\n        return value;\n      });\n      userFilterData = state.usersList.map(value => {\n        if (value.index === selectedUser.index) {\n          value.registeredevents = value.registeredevents + selectedEventsLength;\n        }\n\n        return value;\n      });\n      newState = _objectSpread({}, state, {\n        eventsList: filterData,\n        usersList: userFilterData\n      });\n      return newState;\n\n    default:\n      return newState;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/projects/spectrum/src/store/reducer.js"],"names":["initialState","usersList","eventsList","reducer","state","action","newState","filterData","searcheddata","flag","regex","userFilterData","type","data","UserRows","EventRows","filter","value","includes","index","forEach","element","valueindex","registerd_user","indexOf","splice","user_ids_event_list","Set","registeredevents","map","isShowOnCalander","selectedEvents","eventsId","selectedUser","addUserData","selectedEventsLength","lenth","push"],"mappings":"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","sourcesContent":["const initialState = {\r\n  usersList: [],\r\n  eventsList: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  let newState = { ...state };\r\n  let filterData = \"\";\r\n  let searcheddata=\"\";\r\n  let flag=false;\r\n  let regex=\"\";\r\n  let userFilterData=\"\";\r\n  \r\n  switch (action.type) {\r\n    case \"get_user_event_data\":\r\n    newState = {\r\n      ...state,\r\n      usersList: action.data[0].UserRows,\r\n      eventsList: action.data[1].EventRows\r\n    };\r\n    return newState;\r\n    case \"delete_user_data\":\r\n\r\n    userFilterData= state.usersList.filter((value) => {\r\n      return (!action.data.includes(value.index))\r\n    });\r\n\r\n    filterData=state.eventsList;\r\n    filterData.forEach((element)=>{              \r\n     action.data.forEach((value)=>{\r\n       let valueindex=element.registerd_user.indexOf(value);\r\n       if(valueindex !== -1){\r\n        element.registerd_user.splice(valueindex, 1);\r\n      }\r\n    });               \r\n   })\r\n    newState = {\r\n      ...state,\r\n      usersList: userFilterData,\r\n      eventsList:filterData\r\n    };\r\n    return newState;\r\n    case \"delete_event_data\":    \r\n    \r\n    let user_ids_event_list=[];\r\n    \r\n    filterData = state.eventsList.filter((value) => {\r\n     if(action.data.includes(value.index)){\r\n       user_ids_event_list= [...new Set([...user_ids_event_list, ...value.registerd_user])];\r\n       return false;                         \r\n     }\r\n     return true;\r\n   });\r\n    userFilterData= state.usersList;\r\n    // userFilterData= state.usersList.filter((value) => {\r\n    //   return (!user_ids_event_list.includes(value.index));\r\n\r\n    // });\r\n    userFilterData.forEach((element)=>{\r\n        if(user_ids_event_list.includes(element.index)){\r\n          element.registeredevents=(element.registeredevents !==0)?element.registeredevents-1:0;\r\n        }\r\n    })\r\n    newState = {\r\n      ...state,\r\n      usersList: userFilterData,\r\n      eventsList:filterData\r\n    };\r\n    return newState;\r\n    case \"set_isShowOnCalander\":\r\n    filterData = state.eventsList.map((value) => {\r\n      if(value.index === action.data){\r\n        value.isShowOnCalander= !value.isShowOnCalander;\r\n      }\r\n      return value;\r\n    });\r\n    newState = {\r\n      ...state,\r\n      eventsList: filterData\r\n    };\r\n    return newState;\r\n    case \"add_event_data\":\r\n    let selectedEvents=action.data.eventsId;\r\n    let selectedUser=action.data.addUserData;\r\n    userFilterData=state.usersList;\r\n    let selectedEventsLength=selectedEvents.lenth;\r\n    filterData = state.eventsList.map((value) => {\r\n      if(selectedEvents.includes(value.index)){\r\n        value.registerd_user.push(selectedUser.index);                    \r\n      }\r\n      return value;\r\n    });\r\n    userFilterData = state.usersList.map((value) => {\r\n      if(value.index === selectedUser.index){\r\n        value.registeredevents=value.registeredevents+selectedEventsLength;                    \r\n      }\r\n      return value;\r\n    });\r\n    newState = {\r\n      ...state,\r\n      eventsList: filterData,\r\n      usersList: userFilterData\r\n    };\r\n    return newState;    \r\n    default:                \r\n    return newState;\r\n  }\r\n}\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}