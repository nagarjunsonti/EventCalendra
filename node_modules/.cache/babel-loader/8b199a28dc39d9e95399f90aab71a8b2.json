{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  usersList: [],\n  eventsList: []\n};\n\nconst reducer = (state = initialState, action) => {\n  let newState = _objectSpread({}, state);\n\n  let filterData = \"\";\n  let userFilterData = \"\";\n\n  switch (action.type) {\n    case \"get_user_event_data\":\n      newState = _objectSpread({}, state, {\n        usersList: action.data[0].UserRows,\n        eventsList: action.data[1].EventRows\n      });\n      return newState;\n\n    case \"delete_user_data\":\n      userFilterData = state.usersList.filter(value => {\n        return !action.data.includes(value.index);\n      });\n      filterData = state.eventsList;\n      filterData.forEach(element => {\n        action.data.forEach(value => {\n          let valueindex = element.registerd_user.indexOf(value);\n\n          if (valueindex !== -1) {\n            element.registerd_user.splice(valueindex, 1);\n          }\n        });\n      });\n      newState = _objectSpread({}, state, {\n        usersList: userFilterData,\n        eventsList: filterData\n      });\n      return newState;\n\n    case \"delete_event_data\":\n      let user_ids_event_list = [];\n      filterData = state.eventsList.filter(value => {\n        if (action.data.includes(value.index)) {\n          //user_ids_event_list= [...new Set([...user_ids_event_list, ...value.registerd_user])];\n          user_ids_event_list = user_ids_event_list.concat(value.registerd_user);\n          return false;\n        }\n\n        return true;\n      });\n      userFilterData = state.usersList;\n      userFilterData.forEach(element => {\n        if (user_ids_event_list.includes(element.index)) {\n          let matchedValues = user_ids_event_list.filter(value => {\n            return value === element.index;\n          });\n          element.registeredevents = element.registeredevents !== 0 ? element.registeredevents - matchedValues.length : 0;\n        }\n      });\n      newState = _objectSpread({}, state, {\n        usersList: userFilterData,\n        eventsList: filterData\n      });\n      return newState;\n\n    case \"set_isShowOnCalander\":\n      filterData = state.eventsList.map(value => {\n        if (value.index === action.data) {\n          value.isShowOnCalander = !value.isShowOnCalander;\n        }\n\n        return value;\n      });\n      newState = _objectSpread({}, state, {\n        eventsList: filterData\n      });\n      return newState;\n\n    case \"add_event_data\":\n      let selectedEvents = action.data.eventsId;\n      let selectedUser = action.data.userData;\n      userFilterData = state.usersList;\n      let selectedEventsLength = selectedEvents.length;\n      filterData = state.eventsList.map(value => {\n        if (selectedEvents.includes(value.index)) {\n          value.registerd_user.push(selectedUser.index);\n        }\n\n        return value;\n      });\n      userFilterData.forEach(value => {\n        if (value.index === selectedUser[0].index) {\n          value.registeredevents = value.registeredevents + selectedEventsLength;\n        }\n      });\n      newState = _objectSpread({}, state, {\n        eventsList: filterData,\n        usersList: userFilterData\n      });\n      return newState;\n\n    default:\n      return newState;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/projects/spectrum/src/store/reducer.js"],"names":["initialState","usersList","eventsList","reducer","state","action","newState","filterData","userFilterData","type","data","UserRows","EventRows","filter","value","includes","index","forEach","element","valueindex","registerd_user","indexOf","splice","user_ids_event_list","concat","matchedValues","registeredevents","length","map","isShowOnCalander","selectedEvents","eventsId","selectedUser","userData","selectedEventsLength","push"],"mappings":"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","sourcesContent":["const initialState = {\r\n  usersList: [],\r\n  eventsList: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  let newState = { ...state };\r\n  let filterData = \"\";\r\n  let userFilterData = \"\";\r\n\r\n  switch (action.type) {\r\n    case \"get_user_event_data\":\r\n      newState = {\r\n        ...state,\r\n        usersList: action.data[0].UserRows,\r\n        eventsList: action.data[1].EventRows\r\n      };\r\n      return newState;\r\n    case \"delete_user_data\":\r\n\r\n      userFilterData = state.usersList.filter((value) => {\r\n        return (!action.data.includes(value.index))\r\n      });\r\n\r\n      filterData = state.eventsList;\r\n      filterData.forEach((element) => {\r\n        action.data.forEach((value) => {\r\n          let valueindex = element.registerd_user.indexOf(value);\r\n          if (valueindex !== -1) {\r\n            element.registerd_user.splice(valueindex, 1);\r\n          }\r\n        });\r\n      })\r\n      newState = {\r\n        ...state,\r\n        usersList: userFilterData,\r\n        eventsList: filterData\r\n      };\r\n      return newState;\r\n    case \"delete_event_data\":\r\n\r\n      let user_ids_event_list = [];\r\n\r\n      filterData = state.eventsList.filter((value) => {\r\n        if (action.data.includes(value.index)) {\r\n          //user_ids_event_list= [...new Set([...user_ids_event_list, ...value.registerd_user])];\r\n          user_ids_event_list = user_ids_event_list.concat(value.registerd_user);\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      userFilterData = state.usersList;\r\n      userFilterData.forEach((element) => {\r\n        if (user_ids_event_list.includes(element.index)) {\r\n          let matchedValues = user_ids_event_list.filter((value) => { return value === element.index });\r\n          element.registeredevents = (element.registeredevents !== 0) ? (element.registeredevents - matchedValues.length) : 0;\r\n        }\r\n      })\r\n      newState = {\r\n        ...state,\r\n        usersList: userFilterData,\r\n        eventsList: filterData\r\n      };\r\n      return newState;\r\n    case \"set_isShowOnCalander\":\r\n      filterData = state.eventsList.map((value) => {\r\n        if (value.index === action.data) {\r\n          value.isShowOnCalander = !value.isShowOnCalander;\r\n        }\r\n        return value;\r\n      });\r\n      newState = {\r\n        ...state,\r\n        eventsList: filterData\r\n      };\r\n      return newState;\r\n    case \"add_event_data\":\r\n      let selectedEvents = action.data.eventsId;\r\n      let selectedUser = action.data.userData;\r\n      userFilterData = state.usersList;\r\n      let selectedEventsLength = selectedEvents.length;\r\n\r\n      filterData = state.eventsList.map((value) => {\r\n        if (selectedEvents.includes(value.index)) {\r\n          value.registerd_user.push(selectedUser.index);\r\n        }\r\n        return value;\r\n      });\r\n      userFilterData.forEach((value) => {\r\n        if (value.index === selectedUser[0].index) {\r\n          value.registeredevents = value.registeredevents + selectedEventsLength;\r\n        }\r\n      });\r\n      newState = {\r\n        ...state,\r\n        eventsList: filterData,\r\n        usersList: userFilterData\r\n      };\r\n      return newState;\r\n    default:\r\n      return newState;\r\n  }\r\n}\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}