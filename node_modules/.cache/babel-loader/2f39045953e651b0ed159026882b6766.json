{"ast":null,"code":"/*!\n * Cluster - repl\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar net = require('net'),\n    repl = require('repl');\n/**\n * Enable REPL with all arguments passed to `net.Server#listen()`.\n *\n * Examples:\n *\n *    cluster(server)\n *      .use(cluster.stats())\n *      .use(cluster.repl('/var/run/cluster'))\n *      .listen();\n *\n * In the terminal:\n *\n *    $ sudo telnet /var/run/cluster \n *\n * @return {Function}\n * @api public\n */\n\n\nexports = module.exports = function () {\n  var args = arguments;\n  if (!args.length) throw new Error('repl() plugin requires port/host or path');\n  return function (master) {\n    var server,\n        sockets = []; // start repl\n\n    function start() {\n      // TCP or unix-domain socket repl\n      server = net.createServer(function (sock) {\n        sockets.push(sock);\n        var ctx = repl.start('cluster> ', sock).context;\n        master.emit('repl socket', sock); // augment socket to provide some formatting methods\n\n        sock.title = function (str) {\n          this.write('\\n  \\033[36m' + str + '\\033[0m\\n');\n        };\n\n        sock.row = function (key, val) {\n          this.write('  \\033[90m' + key + ':\\033[0m ' + val + '\\n');\n        }; // merge commands into context\n        // executing in context of master\n\n\n        Object.keys(exports).forEach(function (cmd) {\n          ctx[cmd] = function () {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift(master, sock);\n            return exports[cmd].apply(master, args);\n          };\n        });\n      }); // Apply all arguments given\n\n      server.listen.apply(server, args);\n    } // initial master starts immediately\n    // replacements starts when the previous \n    // has closed\n\n\n    master.on(master.isChild ? 'restart' : 'start', start); // restart notification\n\n    master.on('restarting', function () {\n      sockets.forEach(function (sock) {\n        if (sock.fd) {\n          sock.write('\\n\\033[33mrestarting\\033[0m - closing connection soon\\n');\n        }\n      });\n    }); // close\n\n    master.on('close', function () {\n      sockets.forEach(function (sock) {\n        sock.fd && sock.end();\n      });\n      if (server && server.fd) server.close();\n    });\n  };\n};\n/**\n * Define function `name`, with the given callback\n * `fn(master, sock, ...)` and `description`.\n *\n * @param {String} name\n * @param {Function} fn\n * @param {String} desc\n * @return {Object} exports for chaining\n * @api public\n */\n\n\nvar define = exports.define = function (name, fn, desc) {\n  (exports[name] = fn).description = desc;\n  return exports;\n};\n/**\n * Display commmand help.\n */\n\n\ndefine('help', function (master, sock) {\n  sock.title('Commands');\n  Object.keys(exports).forEach(function (cmd) {\n    if ('define' == cmd) return;\n    var fn = exports[cmd],\n        params = fn.toString().match(/^function +\\((.*?)\\)/)[1],\n        params = params.split(/ *, */).slice(2);\n    sock.row(cmd + '(' + params.join(', ') + ')', fn.description);\n  });\n  sock.write('\\n');\n}, 'Display help information');\n/**\n * Spawn `n` additional workers with the given `signal`.\n */\n\ndefine('spawn', function (master, sock, n, signal) {\n  n = n || 1;\n\n  if (n < 0) {\n    n = Math.abs(n);\n    sock.write('removing ' + n + ' worker' + (n > 1 ? 's' : '') + ' with ' + (signal || 'SIGQUIT') + '\\n');\n    master.remove(n, signal);\n  } else {\n    sock.write('spawning ' + n + ' worker' + (n > 1 ? 's' : '') + '\\n');\n    master.spawn(n);\n  }\n}, 'Spawn one or more additional workers, or remove one or more');\n/**\n * Output process ids.\n */\n\ndefine('pids', function (master, sock) {\n  sock.title('pids');\n  sock.row('master', process.pid);\n  master.children.forEach(function (worker) {\n    sock.row('worker #' + worker.id, worker.proc.pid);\n  });\n  sock.write('\\n');\n}, 'Output process ids');\n/**\n * Kill the given worker by `id` and `signal`.\n */\n\ndefine('kill', function (master, sock, id, signal) {\n  var worker = master.children[id];\n\n  if (worker) {\n    worker.proc.kill(signal);\n    sock.write('sent \\033[36m' + (signal || 'SIGTERM') + '\\033[0m to worker #' + id + '\\n');\n  } else {\n    sock.write('invalid worker id\\n');\n  }\n}, 'Send signal or SIGTERM to the given worker');\n/**\n * Gracefully shutdown.\n */\n\ndefine('shutdown', function (master, sock) {\n  master.close();\n}, 'Gracefully shutdown server');\n/**\n * Hard shutdown.\n */\n\ndefine('stop', function (master, sock) {\n  master.destroy();\n}, 'Hard shutdown');\n/**\n * Gracefully restart all workers.\n */\n\ndefine('restart', function (master, sock) {\n  master.restart();\n}, 'Gracefully restart all workers');","map":null,"metadata":{},"sourceType":"script"}