{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\component\\\\eventTable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport TableWidget from '../widgets/TableWidget';\nimport { connect } from 'react-redux';\nimport SideBarcomponent from './SideBarcomponent';\nimport PropTypes from 'prop-types';\n\nfunction Eventtable(props) {\n  const title = props.title,\n        columns = props.columns,\n        eventsList = props.eventsList;\n\n  const _useState = useState({\n    modelOpen: false,\n    calanderDataList: eventsList,\n    showAddTable: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        modelData = _useState2[0],\n        setModelData = _useState2[1];\n\n  const handleClickModelOpen = data => {\n    console.log(data);\n    let popupData = [data];\n    setModelData({\n      modelOpen: true,\n      calanderDataList: popupData\n    }); //eventsArray=data;\n    //setModelOpen(true);\n  };\n\n  const handleClickModelClose = data => {\n    console.log(data);\n    setModelData(_objectSpread({}, modelData, {\n      modelOpen: false\n    }));\n  };\n\n  const actionColumn = [{\n    title: \"View event\",\n    // handleViewAction:{handleClickModelClose}\n    callBack: handleClickModelOpen,\n    icon: \"view\"\n  }, {\n    title: \"Hide event on calander\",\n    icon: \"switch\"\n  }];\n  const modelOpen = modelData.modelOpen,\n        calanderDataList = modelData.calanderDataList;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(TableWidget, {\n    rows: eventsList,\n    defaultSort: \"name\",\n    columns: columns,\n    tableTitle: title,\n    actionColumn: actionColumn,\n    openModelClick: handleClickModelOpen,\n    handleToolBarAction: props.deleteSelectedRows,\n    handleEventDisplayToggle: props.handleIsShowOnCalander,\n    handleTableSearch: handleTableSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(SideBarcomponent, {\n    modelOpen: modelOpen,\n    closeModelClick: handleClickModelClose,\n    calanderDataList: calanderDataList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    eventsList: state.eventsList\n  };\n};\n\nconst mapDispachToProps = dispatch => {\n  return {\n    deleteSelectedRows: seletedRowIds => {\n      dispatch({\n        type: \"delete_event_data\",\n        data: seletedRowIds\n      });\n    },\n    handleIsShowOnCalander: row_id => {\n      dispatch({\n        type: \"set_isShowOnCalander\",\n        data: row_id\n      });\n    },\n    handleTableSearch: searcheddata => {\n      dispatch({\n        type: \"search_User_tables_data\",\n        data: searcheddata\n      });\n    }\n  };\n};\n\nEventtable.propTypes = {\n  title: PropTypes.string.isRequired,\n  columns: PropTypes.array.isRequired,\n  eventsList: PropTypes.array.isRequired,\n  deleteSelectedRows: PropTypes.func.isRequired,\n  handleIsShowOnCalander: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispachToProps)(Eventtable);","map":{"version":3,"sources":["C:/projects/spectrum/src/component/eventTable.js"],"names":["React","useState","TableWidget","connect","SideBarcomponent","PropTypes","Eventtable","props","title","columns","eventsList","modelOpen","calanderDataList","showAddTable","modelData","setModelData","handleClickModelOpen","data","console","log","popupData","handleClickModelClose","actionColumn","callBack","icon","deleteSelectedRows","handleIsShowOnCalander","handleTableSearch","mapStateToProps","state","mapDispachToProps","dispatch","seletedRowIds","type","row_id","searcheddata","propTypes","string","isRequired","array","func"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\r\nimport TableWidget from '../widgets/TableWidget';\r\nimport {connect} from 'react-redux';\r\nimport SideBarcomponent from './SideBarcomponent';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Eventtable(props){\r\n    const {title, columns, eventsList}=props;    \r\n    \r\n    const [modelData, setModelData]=useState({\r\n      modelOpen:false,\r\n      calanderDataList:eventsList,\r\n      showAddTable:false\r\n    });    \r\n\r\n    const handleClickModelOpen=(data)=>{\r\n        console.log(data);\r\n        let popupData=[data];\r\n        setModelData({modelOpen:true,calanderDataList:popupData});\r\n        //eventsArray=data;\r\n        //setModelOpen(true);\r\n    }\r\n    const handleClickModelClose=(data)=>{\r\n        console.log(data);\r\n        setModelData({...modelData, modelOpen:false});\r\n    }\r\n    const actionColumn=[\r\n        {\r\n          title:\"View event\",\r\n          // handleViewAction:{handleClickModelClose}\r\n          callBack:handleClickModelOpen,\r\n          icon:\"view\"\r\n        },        \r\n        {\r\n          title:\"Hide event on calander\",          \r\n          icon:\"switch\"\r\n        }        \r\n    ];\r\n    const {modelOpen, calanderDataList}=modelData;\r\n    return (\r\n        <React.Fragment>            \r\n            <TableWidget \r\n              rows={eventsList} \r\n              defaultSort='name'\r\n              columns={columns}\r\n              tableTitle={title}\r\n              actionColumn={actionColumn}\r\n              openModelClick={handleClickModelOpen} \r\n              handleToolBarAction={props.deleteSelectedRows}\r\n              handleEventDisplayToggle={props.handleIsShowOnCalander}    \r\n              handleTableSearch={handleTableSearch}                     \r\n            />\r\n            <SideBarcomponent \r\n                    modelOpen={modelOpen}                    \r\n                    closeModelClick={handleClickModelClose}\r\n                    calanderDataList={calanderDataList}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n  return {\r\n    eventsList:state.eventsList\r\n  }\r\n}\r\nconst mapDispachToProps=(dispatch)=>{\r\n  return {\r\n    deleteSelectedRows:(seletedRowIds)=>{\r\n      dispatch({type:\"delete_event_data\", data:seletedRowIds})\r\n    },\r\n    handleIsShowOnCalander:(row_id)=>{\r\n      dispatch({type:\"set_isShowOnCalander\", data:row_id})\r\n    },\r\n    handleTableSearch:(searcheddata)=>{\r\n        dispatch({type:\"search_User_tables_data\", data:searcheddata})\r\n    }\r\n  }\r\n}\r\nEventtable.propTypes={\r\n  title:PropTypes.string.isRequired,\r\n  columns:PropTypes.array.isRequired,\r\n  eventsList:PropTypes.array.isRequired,\r\n  deleteSelectedRows:PropTypes.func.isRequired,\r\n  handleIsShowOnCalander:PropTypes.func.isRequired\r\n}\r\nexport default connect(mapStateToProps, mapDispachToProps)(Eventtable);"]},"metadata":{},"sourceType":"module"}