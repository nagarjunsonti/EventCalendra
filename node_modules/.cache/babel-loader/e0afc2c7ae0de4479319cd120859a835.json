{"ast":null,"code":"/*!\n * Cluster - stats\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = require('fs'),\n    Log = require('log'),\n    repl = require('./repl'),\n    utils = require('../utils'),\n    os = require('os');\n/**\n * Enable stat tracking with the given `options`.\n *\n * Options:\n *\n *  - `connections`    enable connection statistics\n *  - `requests`       enable request statistics\n *  - `lightRequests`  enable light-weight request statistics\n *\n * Real-time applications should utilize `lightRequests` for reporting\n * when possible, although less data is available.\n *\n * TODO: UDP\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\n\nmodule.exports = function (options) {\n  options = options || {};\n  stats.enableInWorker = options.connections || options.requests;\n\n  function stats(master) {\n    var server = master.server;\n    master.connectionStats = options.connections;\n    master.requestStats = options.requests;\n    master.lightRequestStats = options.lightRequests; // worker stats\n\n    if (master.isWorker) {\n      var id = 0; // connections\n\n      if (options.connections) {\n        server.on('connection', function (sock) {\n          var data = {\n            remoteAddress: sock.remoteAddress\n          };\n          master.call('reportStats', 'connection', data);\n          sock.on('close', function () {\n            master.call('reportStats', 'disconnection', data);\n          });\n        });\n      } // light-weight requests\n\n\n      if (options.lightRequests) {\n        utils.unshiftListener(server, 'request', function (req, res) {\n          master.call('reportStats', 'light request', res.id = ++id);\n          var end = res.end;\n\n          res.end = function (str, encoding) {\n            res.end = end;\n            res.end(str, encoding);\n            master.call('reportStats', 'light request complete', res.id);\n          };\n        });\n      } // requests\n\n\n      if (options.requests) {\n        utils.unshiftListener(server, 'request', function (req, res) {\n          var data = {\n            remoteAddress: req.socket.remoteAddress,\n            headers: req.headers,\n            httpVersion: req.httpVersion,\n            method: req.method,\n            url: req.url,\n            id: ++id\n          };\n          master.call('reportStats', 'request', data);\n          var end = res.end;\n\n          res.end = function (str, encoding) {\n            res.end = end;\n            res.end(str, encoding);\n            master.call('reportStats', 'request complete', data);\n          };\n        });\n      } // master stats\n\n    } else {\n      master.stats = {\n        start: new Date(),\n        restarts: 0,\n        workersSpawned: 0,\n        workersKilled: 0\n      }; // 0.4.x\n\n      if (os) {\n        master.stats.totalmem = os.totalmem();\n        master.stats.freemem = os.freemem();\n      } // worker stats\n\n\n      master.reportStats = function (worker, type, data) {\n        master.emit('client ' + type, worker, data);\n\n        switch (type) {\n          case 'connection':\n            worker.stats.connectionsTotal++;\n            worker.stats.connectionsActive++;\n            break;\n\n          case 'disconnection':\n            worker.stats.connectionsActive--;\n            break;\n\n          case 'light request':\n          case 'request':\n            worker.stats.requestsTotal++;\n        }\n      }; // total workers spawned\n\n\n      master.on('worker', function (worker) {\n        ++master.stats.workersSpawned;\n        worker.stats = {\n          start: new Date(),\n          connectionsTotal: 0,\n          connectionsActive: 0,\n          requestsTotal: 0\n        };\n      }); // total worker deaths\n\n      master.on('worker killed', function (worker) {\n        ++master.stats.workersKilled;\n      }); // restarting\n\n      master.on('restarting', function (data) {\n        ++master.stats.restarts;\n        data.stats = master.stats;\n      }); // restart\n\n      master.on('restart', function (data) {\n        master.stats = data.stats;\n        master.stats.start = new Date(master.stats.start);\n      });\n    }\n  }\n\n  return stats;\n};\n/**\n * REPL statistics command.\n */\n\n\nrepl.define('stats', function (master, sock) {\n  var active = master.children.length,\n      total = master.stats.workersSpawned,\n      deaths = master.stats.workersKilled,\n      restarts = master.stats.restarts; // master stats\n\n  sock.title('Master');\n  if (os) sock.row('os', os.type() + ' ' + os.release());\n  sock.row('state', master.state);\n  sock.row('started', master.stats.start.toUTCString());\n  sock.row('uptime', utils.formatDateRange(new Date(), master.stats.start));\n  sock.row('restarts', restarts);\n  sock.row('workers', active);\n  sock.row('deaths', deaths); // resources\n\n  if (os) {\n    sock.title('Resources');\n    sock.row('load average', os.loadavg().map(function (n) {\n      return n.toFixed(2);\n    }).join(' '));\n    sock.row('cores utilized', active + ' / ' + os.cpus().length);\n    var free = utils.formatBytes(master.stats.freemem);\n    var total = utils.formatBytes(master.stats.totalmem);\n    sock.row('memory at boot (free / total)', free + ' / ' + total);\n    var free = utils.formatBytes(os.freemem());\n    var total = utils.formatBytes(os.totalmem());\n    sock.row('memory now (free / total)', free + ' / ' + total);\n  } // worker stats\n\n\n  sock.title('Workers'); // connections\n\n  if (master.connectionStats) {\n    sock.row('connections total', sum(master.children, 'connectionsTotal'));\n    sock.row('connections active', sum(master.children, 'connectionsActive'));\n  } // requests\n\n\n  if (master.requestStats) {\n    sock.row('requests total', sum(master.children, 'requestsTotal'));\n  }\n\n  master.children.forEach(function (worker) {\n    var stats = '',\n        piped = []; // uptime\n\n    stats += utils.formatDateRange(new Date(), worker.stats.start); // connections\n\n    if (master.connectionStats) {\n      piped.push(worker.stats.connectionsActive);\n      piped.push(worker.stats.connectionsTotal);\n    } // requests\n\n\n    if (master.requestStats) {\n      piped.push(worker.stats.requestsTotal);\n    }\n\n    if (piped.length) {\n      stats += ' ' + piped.join('\\033[90m|\\033[0m');\n    }\n\n    sock.row(worker.id, stats);\n  });\n  sock.write('\\n');\n}, 'Display server statistics');\n/**\n * Return sum of each `prop` in `arr`.\n *\n * @param {Array} arr\n * @param {String} prop\n * @return {Number}\n * @api private\n */\n\nfunction sum(arr, prop) {\n  return arr.reduce(function (sum, obj) {\n    return sum + obj.stats[prop];\n  }, 0);\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}