{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\projects\\\\spectrum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\projects\\\\spectrum\\\\src\\\\component\\\\eventTable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport TableWidget from '../widgets/TableWidget';\nimport SideBarcomponent from './SideBarcomponent';\nimport PropTypes from 'prop-types';\n\nfunction Eventtable(props) {\n  let title = props.title,\n      columns = props.columns,\n      tableData = props.tableData;\n\n  let _useState = useState({\n    modelOpen: false,\n    calanderDataList: tableData,\n    showAddTable: false,\n    searchFilterValue: \"\",\n    sideBarTitle: \"All\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      modelData = _useState2[0],\n      setModelData = _useState2[1];\n\n  useEffect(() => {\n    setModelData(_objectSpread({}, modelData, {\n      calanderDataList: tableData\n    }));\n  }, [tableData]);\n\n  const handleClickModelOpen = data => {\n    console.log(data);\n    let popupData = data.length ? data : [data];\n    sideBarTitle = data.organizer;\n    setModelData({\n      modelOpen: true,\n      calanderDataList: popupData,\n      sideBarTitle: sideBarTitle\n    }); //eventsArray=data;\n    //setModelOpen(true);\n  };\n\n  const handleClickModelClose = data => {\n    console.log(data);\n    setModelData(_objectSpread({}, modelData, {\n      modelOpen: false\n    }));\n  };\n\n  const showAllEvents = () => {\n    handleClickModelOpen(tableData); //setModelData({...modelData, calanderDataList:tableData,modelOpen:true});\n  };\n\n  const actionColumn = [{\n    title: \"View event\",\n    // handleViewAction:{handleClickModelClose}\n    callBack: handleClickModelOpen,\n    icon: \"view\"\n  }, {\n    title: \"Hide event on calander\",\n    icon: \"switch\"\n  }];\n  const modelOpen = modelData.modelOpen,\n        calanderDataList = modelData.calanderDataList,\n        searchFilterValue = modelData.searchFilterValue;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(TableWidget, {\n    rows: modelData.calanderDataList,\n    defaultSort: \"name\",\n    columns: columns,\n    tableTitle: title,\n    actionColumn: actionColumn,\n    openModelClick: handleClickModelOpen,\n    handleToolBarAction: props.handleDeleteSelectedRows,\n    handleEventDisplayToggle: props.handleIsShowOnCalander,\n    handleTableSearch: props.handleTablseSearch,\n    searchPlaceholder: \"Search By Organizer\",\n    searchFilterValue: searchFilterValue,\n    showAllEvents: showAllEvents,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(SideBarcomponent, {\n    modelOpen: modelOpen,\n    closeModelClick: handleClickModelClose,\n    calanderDataList: calanderDataList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }));\n}\n\nEventtable.propTypes = {\n  title: PropTypes.string.isRequired,\n  columns: PropTypes.array.isRequired,\n  tableData: PropTypes.array.isRequired,\n  handleDeleteSelectedRows: PropTypes.func.isRequired,\n  handleIsShowOnCalander: PropTypes.func.isRequired\n};\nexport default Eventtable;","map":{"version":3,"sources":["C:/projects/spectrum/src/component/eventTable.js"],"names":["React","useState","useEffect","TableWidget","SideBarcomponent","PropTypes","Eventtable","props","title","columns","tableData","modelOpen","calanderDataList","showAddTable","searchFilterValue","sideBarTitle","modelData","setModelData","handleClickModelOpen","data","console","log","popupData","length","organizer","handleClickModelClose","showAllEvents","actionColumn","callBack","icon","handleDeleteSelectedRows","handleIsShowOnCalander","handleTablseSearch","propTypes","string","isRequired","array","func"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport TableWidget from '../widgets/TableWidget';\r\nimport SideBarcomponent from './SideBarcomponent';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Eventtable(props){\r\n    let {title, columns, tableData}=props;    \r\n    \r\n    let [modelData, setModelData]=useState({\r\n      modelOpen:false,\r\n      calanderDataList:tableData,\r\n      showAddTable:false,\r\n      searchFilterValue:\"\",\r\n      sideBarTitle:\"All\"\r\n    });    \r\n\r\n    useEffect(()=>{\r\n      setModelData({\r\n        ...modelData,\r\n        calanderDataList:tableData\r\n      })\r\n\r\n    },[tableData])\r\n    const handleClickModelOpen=(data)=>{\r\n        console.log(data);\r\n        let popupData=(data.length)?data:[data];\r\n        sideBarTitle=data.organizer;\r\n        setModelData({modelOpen:true,calanderDataList:popupData, sideBarTitle:sideBarTitle});\r\n        //eventsArray=data;\r\n        //setModelOpen(true);\r\n    }\r\n    const handleClickModelClose=(data)=>{\r\n        console.log(data);\r\n        setModelData({...modelData, modelOpen:false});\r\n    }\r\n    const showAllEvents=()=>{\r\n      handleClickModelOpen(tableData);\r\n    //setModelData({...modelData, calanderDataList:tableData,modelOpen:true});\r\n    }\r\n    const actionColumn=[\r\n        {\r\n          title:\"View event\",\r\n          // handleViewAction:{handleClickModelClose}\r\n          callBack:handleClickModelOpen,\r\n          icon:\"view\"\r\n        },        \r\n        {\r\n          title:\"Hide event on calander\",          \r\n          icon:\"switch\"\r\n        }        \r\n    ];\r\n    const {modelOpen, calanderDataList, searchFilterValue}=modelData;\r\n    \r\n    return (\r\n        <React.Fragment>            \r\n            <TableWidget \r\n              rows={modelData.calanderDataList} \r\n              defaultSort='name'\r\n              columns={columns}\r\n              tableTitle={title}\r\n              actionColumn={actionColumn}\r\n              openModelClick={handleClickModelOpen} \r\n              handleToolBarAction={props.handleDeleteSelectedRows}\r\n              handleEventDisplayToggle={props.handleIsShowOnCalander}    \r\n              handleTableSearch={props.handleTablseSearch}\r\n              searchPlaceholder=\"Search By Organizer\"\r\n              searchFilterValue={searchFilterValue}  \r\n              showAllEvents={showAllEvents}                    \r\n            />\r\n            <SideBarcomponent \r\n                    modelOpen={modelOpen}                    \r\n                    closeModelClick={handleClickModelClose}\r\n                    calanderDataList={calanderDataList}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\nEventtable.propTypes={\r\n  title:PropTypes.string.isRequired,\r\n  columns:PropTypes.array.isRequired,\r\n  tableData:PropTypes.array.isRequired,\r\n  handleDeleteSelectedRows:PropTypes.func.isRequired,\r\n  handleIsShowOnCalander:PropTypes.func.isRequired\r\n}\r\nexport default Eventtable;"]},"metadata":{},"sourceType":"module"}