{"ast":null,"code":"/*!\n * Cluster - debug\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Enable verbose debugging output.\n *\n * @return {Function}\n * @api public\n */\nmodule.exports = function (options) {\n  options = options || {}; // strip colors\n\n  function color(text) {\n    if (options.colors === false) return text.replace(/\\033\\[\\d+m/g, '');\n    return text;\n  } // logger\n\n\n  var log = {\n    debug: function (str) {\n      console.error(color('  \\033[90mdebug - %s\\033[0m'), str);\n    },\n    info: function (str) {\n      console.error(color('  info \\033[90m- %s\\033[0m'), str);\n    },\n    warning: function (str) {\n      console.error(color('  \\033[33mwarning\\033[0m \\033[90m- %s\\033[0m'), str);\n    },\n    error: function (str) {\n      console.error(color('  \\033[31merror\\033[0m \\033[90m- %s\\033[0m'), str);\n    }\n  };\n  return function (master) {\n    // start\n    master.on('start', function () {\n      log.info('master started');\n    }); // closing\n\n    master.on('closing', function () {\n      log.info('shutting down');\n    }); // close\n\n    master.on('close', function () {\n      log.info('shutdown complete');\n    }); // killing workers\n\n    master.on('kill', function (sig) {\n      log.warning('kill(' + (sig || 'SIGTERM') + ')');\n    }); // worker died\n\n    master.on('worker killed', function (worker) {\n      if ('restarting' == master.state) return;\n      log.warning('worker ' + worker.id + ' died');\n    }); // worker exception\n\n    master.on('worker exception', function (worker, err) {\n      log.error('worker ' + worker.id + ' uncaught exception ' + err.message);\n    }); // worker is waiting on connections to be closed\n\n    master.on('worker waiting', function (worker, connections) {\n      log.warning('worker ' + worker.id + ' waiting on ' + connections + ' connections');\n    }); // worker has timed out\n\n    master.on('worker timeout', function (worker, timeout) {\n      log.warning('worker ' + worker.id + ' timed out after ' + timeout + 'ms');\n    }); // connection\n\n    master.on('worker connected', function (worker) {\n      log.info('worker ' + worker.id + ' connected');\n    }); // removed\n\n    master.on('worker removed', function (worker) {\n      log.info('worker ' + worker.id + ' removed');\n    }); // worker\n\n    master.on('worker', function (worker) {\n      log.info('worker ' + worker.id + ' spawned');\n    }); // listening\n\n    master.on('listening', function () {\n      log.info('listening for connections');\n    }); // cyclic or immediate restart\n\n    master.on('cyclic restart', function () {\n      log.warning('cyclic restart detected, restarting in ' + master.options['restart timeout'] + 'ms');\n    }); // restart requested\n\n    master.on('restarting', function () {\n      log.info('restart requested');\n    }); // restart complete\n\n    master.on('restart', function () {\n      log.info('restart complete');\n    }); // exit\n\n    process.on('exit', function () {\n      log.debug('exit');\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}