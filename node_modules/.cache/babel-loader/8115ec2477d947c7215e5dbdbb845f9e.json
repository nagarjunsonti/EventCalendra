{"ast":null,"code":"/*!\n * Cluster - logger\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = require('fs'),\n    Log = require('log'),\n    mkdir = require('mkdirp').mkdirp;\n/**\n * Enable stdout / stderr logs for both the master\n * process, as well as workers.\n *\n * These output to the given `dir`, or `./logs`\n * relative to the server's file.\n *\n * Examples:\n *\n *    // log to ./logs\n *    engine(server)\n *      .use(engine.logger())\n *      .listen(3000);\n *\n *    // log to ./app/logs\n *    engine(server)\n *      .use(engine.logger('./app/logs'))\n *      .listen(3000);\n *\n *    // log to /var/log/node\n *    engine(server)\n *      .use(engine.logger('/var/log/node'))\n *      .listen(3000);\n *\n * @param {String} dir\n * @param {Number} level\n * @return {Function}\n * @api public\n */\n\n\nmodule.exports = function (dir, level) {\n  return function (master) {\n    dir = master.resolve(dir || 'logs');\n    mkdir(dir, 0755, function (err) {\n      if (err) throw err; // master log\n\n      var stream = fs.createWriteStream(dir + '/master.log', {\n        flags: 'a'\n      });\n      var log = master.log = new Log(level || Log.INFO, stream); // master events\n\n      master.on('start', function () {\n        log.info('master started');\n      }); // master is shutting down\n\n      master.on('closing', function () {\n        log.warning('shutting down master');\n      }); // master has closed and performed cleanup\n\n      master.on('close', function () {\n        log.info('shutdown complete');\n      }); // sending signal to all workers\n\n      master.on('kill', function (sig) {\n        log.warning('sent kill(%s) to all workers', sig);\n      }); // worker was killed\n\n      master.on('worker killed', function (worker) {\n        if ('restarting' == master.state) return;\n        log.error('worker %s died', worker.id);\n      }); // worker exception\n\n      master.on('worker exception', function (worker, err) {\n        log.error('worker %s uncaught exception %s', worker.id, err.message);\n      }); // worker is waiting on connections to be closed\n\n      master.on('worker waiting', function (worker, connections) {\n        log.info('worker %s waiting on %s connections', worker.id, connections);\n      }); // worker has timed out\n\n      master.on('worker timeout', function (worker, timeout) {\n        log.warning('worker %s timed out after %sms', worker.id, timeout);\n      }); // worker connected to master\n\n      master.on('worker connected', function (worker) {\n        log.debug('worker %s connected', worker.id);\n      }); // cyclic or immediate restart\n\n      master.on('cyclic restart', function () {\n        log.warning('cyclic restart detected, restarting in %sms', master.options['restart timeout']);\n      }); // restart requested\n\n      master.on('restarting', function () {\n        log.info('restart requested');\n      }); // restart complete\n\n      master.on('restart', function () {\n        log.info('restart complete');\n      }); // repl socket connection established\n\n      master.on('repl socket', function (sock) {\n        var from = sock.remoteAddress ? 'from ' + sock.remoteAddress : '';\n        sock.on('connect', function () {\n          log.info('repl connection %s', from);\n        });\n        sock.on('close', function () {\n          log.info('repl disconnect %s', from);\n        });\n      }); // override fds\n\n      master.customFds = [-1, -1]; // children\n\n      master.on('worker', function (worker) {\n        var proc = worker.proc;\n        log.info('spawned worker ' + worker.id); // worker log streams\n\n        var access = fs.createWriteStream(dir + '/workers.access.log', {\n          flags: 'a'\n        }),\n            error = fs.createWriteStream(dir + '/workers.error.log', {\n          flags: 'a'\n        }); // redirect stdout / stderr\n\n        proc.stdout.pipe(access);\n        proc.stderr.pipe(error);\n      });\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}